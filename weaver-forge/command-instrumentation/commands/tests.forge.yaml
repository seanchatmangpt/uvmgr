name: tests-command-instrumentation
description: Instrumentation for test runner commands with subprocess fix
version: 1.0.0
author: weaver-forge
extends: ../base-command.forge.yaml

inputs:
  command_module: tests
  has_subcommands: true
  uses_subprocess: true

outputs:
  - path: src/uvmgr/commands/tests.py
    merge_strategy: patch
    patches:
      - description: Add instrumentation imports
        after: "import subprocess"
        content: |
          
          from uvmgr.core.instrumentation import add_span_attributes, add_span_event, instrument_command, child_span
          from uvmgr.core.semconv import TestAttributes, ProcessAttributes
          from uvmgr.core.process import run_logged
      
      - description: Instrument run command
        pattern: "@tests_app.command\\(\"run\"\\)"
        replacement: |
          @tests_app.command("run")
          @instrument_command("tests_run", track_args=True)
      
      - description: Fix subprocess call in run command
        pattern: |
          cmd = \["pytest"\]
          if verbose:
              cmd.append\("-v"\)
          subprocess.run\(cmd, check=True\)
        replacement: |
          cmd = ["pytest"]
          if verbose:
              cmd.append("-v")
          
          # Add test operation attributes
          add_span_attributes(
              **{
                  TestAttributes.OPERATION: "run",
                  TestAttributes.FRAMEWORK: "pytest",
                  ProcessAttributes.COMMAND: " ".join(cmd),
              }
          )
          
          add_span_event("test.run.started")
          
          # Use instrumented subprocess execution
          with child_span("test.pytest.execute", 
                         executable="pytest",
                         command=" ".join(cmd)):
              run_logged(cmd)
          
          add_span_event("test.run.completed")
      
      - description: Instrument coverage command
        pattern: "@tests_app.command\\(\"coverage\"\\)"
        replacement: |
          @tests_app.command("coverage")
          @instrument_command("tests_coverage", track_args=True)
      
      - description: Fix subprocess calls in coverage command
        pattern: |
          cmd_run = \["coverage", "run", "--module", "pytest"\]
          cmd_report = \["coverage", "report"\]
          if verbose:
              cmd_run.append\("-v"\)
          subprocess.run\(cmd_run, check=True\)
          subprocess.run\(cmd_report, check=True\)
        replacement: |
          cmd_run = ["coverage", "run", "--module", "pytest"]
          cmd_report = ["coverage", "report"]
          if verbose:
              cmd_run.append("-v")
          
          # Add coverage operation attributes
          add_span_attributes(
              **{
                  TestAttributes.OPERATION: "coverage",
                  TestAttributes.FRAMEWORK: "pytest",
              }
          )
          
          add_span_event("coverage.started")
          
          # Run coverage with instrumented subprocess
          with child_span("test.coverage.run",
                         executable="coverage",
                         command=" ".join(cmd_run)):
              run_logged(cmd_run)
          
          add_span_event("coverage.tests_complete")
          
          # Generate report with instrumented subprocess
          with child_span("test.coverage.report",
                         executable="coverage", 
                         command=" ".join(cmd_report)):
              run_logged(cmd_report)
          
          add_span_event("coverage.report_generated")

example_output: |
  """
  Typer sub-app: uvmgr tests â€¦

  This module implements a command (run) and a subcommand (coverage) to run the test suite and generate coverage reports.
  """

  from __future__ import annotations

  import subprocess

  from uvmgr.core.instrumentation import add_span_attributes, add_span_event, instrument_command, child_span
  from uvmgr.core.semconv import TestAttributes, ProcessAttributes
  from uvmgr.core.process import run_logged

  import typer

  from .. import main as cli_root

  tests_app = typer.Typer(help="Run the test suite (and coverage) using pytest and coverage.")

  # Mount the sub-app under the name 'tests' (so that 'uvmgr tests' works)
  cli_root.app.add_typer(tests_app, name="tests")


  @tests_app.command("run")
  @instrument_command("tests_run", track_args=True)
  def run(verbose: bool = typer.Option(False, "--verbose", "-v", help="Run tests verbosely.")):
      """Run the test suite using pytest."""
      cmd = ["pytest"]
      if verbose:
          cmd.append("-v")
      
      # Add test operation attributes
      add_span_attributes(
          **{
              TestAttributes.OPERATION: "run",
              TestAttributes.FRAMEWORK: "pytest",
              ProcessAttributes.COMMAND: " ".join(cmd),
          }
      )
      
      add_span_event("test.run.started")
      
      # Use instrumented subprocess execution
      with child_span("test.pytest.execute", 
                     executable="pytest",
                     command=" ".join(cmd)):
          run_logged(cmd)
      
      add_span_event("test.run.completed")


  @tests_app.command("coverage")
  @instrument_command("tests_coverage", track_args=True)
  def run_coverage(
      verbose: bool = typer.Option(False, "--verbose", "-v", help="Run coverage verbosely."),
  ):
      """Generate coverage reports using coverage run + coverage report."""
      cmd_run = ["coverage", "run", "--module", "pytest"]
      cmd_report = ["coverage", "report"]
      if verbose:
          cmd_run.append("-v")
      
      # Add coverage operation attributes
      add_span_attributes(
          **{
              TestAttributes.OPERATION: "coverage",
              TestAttributes.FRAMEWORK: "pytest",
          }
      )
      
      add_span_event("coverage.started")
      
      # Run coverage with instrumented subprocess
      with child_span("test.coverage.run",
                     executable="coverage",
                     command=" ".join(cmd_run)):
          run_logged(cmd_run)
      
      add_span_event("coverage.tests_complete")
      
      # Generate report with instrumented subprocess
      with child_span("test.coverage.report",
                     executable="coverage", 
                     command=" ".join(cmd_report)):
          run_logged(cmd_report)
      
      add_span_event("coverage.report_generated")