name: cache-command-instrumentation
description: Instrumentation for cache management commands
version: 1.0.0
author: weaver-forge
extends: ../base-command.forge.yaml

inputs:
  command_module: cache
  has_subcommands: false
  uses_subprocess: false

outputs:
  - path: src/uvmgr/commands/cache.py
    merge_strategy: patch
    patches:
      - description: Add instrumentation imports
        after: "from .. import main as cli_root"
        content: |
          from uvmgr.core.instrumentation import add_span_attributes, instrument_command
          from uvmgr.core.semconv import UvmgrAttributes
      
      - description: Instrument dir command
        pattern: "@cache_app.command\\(\"dir\"\\)"
        replacement: |
          @cache_app.command("dir")
          @instrument_command("cache_dir")
      
      - description: Add attributes to dir command
        after: "def dir\\(ctx: typer.Context\\):"
        content: |
              """Print the uv cache directory."""
              # Add cache operation attributes
              add_span_attributes(
                  **{
                      UvmgrAttributes.OPERATION_TYPE: "cache",
                      UvmgrAttributes.OPERATION_NAME: "dir",
                  }
              )
      
      - description: Instrument clean command
        pattern: "@cache_app.command\\(\"clean\"\\)"
        replacement: |
          @cache_app.command("clean")
          @instrument_command("cache_clean")
      
      - description: Add attributes to clean command
        after: "def clean\\(ctx: typer.Context\\):"
        content: |
              """Clean/purge the uv cache."""
              # Add cache operation attributes
              add_span_attributes(
                  **{
                      UvmgrAttributes.OPERATION_TYPE: "cache",
                      UvmgrAttributes.OPERATION_NAME: "clean",
                  }
              )

example_output: |
  """
  Typer sub-app: uvmgr cache …
  """

  from __future__ import annotations

  import typer

  from uvmgr.core.shell import colour, dump_json
  from uvmgr.ops import cache as cache_ops

  from .. import main as cli_root
  from uvmgr.core.instrumentation import add_span_attributes, instrument_command
  from uvmgr.core.semconv import UvmgrAttributes

  cache_app = typer.Typer(help="Manage uv's cache")
  cli_root.app.add_typer(cache_app, name="cache")


  @cache_app.command("dir")
  @instrument_command("cache_dir")
  def dir(ctx: typer.Context):
      """Print the uv cache directory."""
      # Add cache operation attributes
      add_span_attributes(
          **{
              UvmgrAttributes.OPERATION_TYPE: "cache",
              UvmgrAttributes.OPERATION_NAME: "dir",
          }
      )
      payload = cache_ops.dir()
      if ctx.meta.get("json"):
          dump_json({"cache_dir": payload})
      else:
          colour(payload, "green")


  @cache_app.command("clean")
  @instrument_command("cache_clean")
  def clean(ctx: typer.Context):
      """Clean/purge the uv cache."""
      # Add cache operation attributes
      add_span_attributes(
          **{
              UvmgrAttributes.OPERATION_TYPE: "cache",
              UvmgrAttributes.OPERATION_NAME: "clean",
          }
      )
      cache_ops.clean()
      if ctx.meta.get("json"):
          dump_json({"status": "cleaned"})
      else:
          colour("✔ cache cleaned", "green")