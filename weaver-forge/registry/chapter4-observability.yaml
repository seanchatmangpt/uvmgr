groups:
  # Chapter 4.7: Self-Observing Agents
  - id: agent
    type: attribute_group
    brief: 'Self-observing agent attributes demonstrating Chapter 4.7 concepts'
    note: 'Agents that observe and describe their behavior using semantic telemetry'
    attributes:
      - id: agent.name
        type: string
        brief: 'The name or identifier of the agent'
        note: 'Unique identifier for the self-observing agent'
        examples: ['analyzer-agent', 'validator-agent', 'coordinator-agent']
        requirement_level: required
        stability: stable
        
      - id: agent.operation
        type: string
        brief: 'The operation being performed by the agent'
        note: 'Semantic description of what the agent is doing'
        examples: ['analyze', 'validate', 'coordinate', 'reflect', 'refine']
        requirement_level: required
        stability: stable
        
      - id: agent.state
        type: string
        brief: 'Current state of the agent'
        note: 'Self-reported state for agent self-awareness'
        examples: ['initializing', 'executing', 'reflecting', 'completed', 'error']
        requirement_level: required
        stability: stable
        
      - id: agent.self_assessment
        type: string
        brief: 'Agent self-assessment of its performance'
        note: 'Chapter 4.7: Agents understand and describe their behavior'
        examples: ['functioning_normally', 'degraded_performance', 'requires_attention']
        requirement_level: recommended
        stability: stable
        
      - id: agent.reflection_count
        type: int
        brief: 'Number of self-reflection operations performed'
        note: 'Chapter 4.8: Reflection happens when agents monitor themselves'
        requirement_level: optional
        stability: stable

  # Chapter 4.3: Semantic Context
  - id: semantic
    type: attribute_group
    brief: 'Semantic context attributes for meaningful observation'
    note: 'Attaching meaning to every signal as described in Chapter 4.3'
    attributes:
      - id: semantic.context
        type: string
        brief: 'The semantic context of the observation'
        note: 'Provides meaning to raw telemetry data'
        examples: ['performance_measurement', 'security_validation', 'business_logic']
        requirement_level: required
        stability: stable
        
      - id: semantic.interpretation
        type: string
        brief: 'How this data should be interpreted'
        note: 'Guidance for understanding the telemetry signal'
        examples: ['latency_ms', 'error_count', 'success_rate_percentage']
        requirement_level: required
        stability: stable
        
      - id: semantic.policy_compliance
        type: boolean
        brief: 'Whether the observation complies with defined policies'
        note: 'Chapter 4.8: Refinement against policy alignment'
        requirement_level: recommended
        stability: stable

  # Chapter 4.4-4.6: Weaver Forge Integration
  - id: forge
    type: attribute_group
    brief: 'Forge-specific attributes for artifact generation'
    note: 'Demonstrating Forge as a bridge between schemas and runtime'
    attributes:
      - id: forge.artifact_type
        type: string
        brief: 'Type of artifact generated by Forge'
        note: 'Chapter 4.6: Forge generates various integration artifacts'
        examples: ['documentation', 'code', 'schema', 'policy']
        requirement_level: required
        stability: stable
        
      - id: forge.generation_timestamp
        type: string
        brief: 'When the artifact was generated'
        note: 'Timestamp for tracking schema evolution'
        requirement_level: required
        stability: stable
        
      - id: forge.schema_version
        type: string
        brief: 'Version of the schema used for generation'
        note: 'Enables refinement and evolution tracking'
        examples: ['1.0.0', '2.1.3', 'latest']
        requirement_level: required
        stability: stable