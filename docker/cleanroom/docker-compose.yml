# Docker Compose for Cleanroom DoD Validation
# ============================================
#
# This compose file sets up a complete cleanroom environment
# for validating DoD automation against external projects.

version: '3.8'

services:
  # Main validation environment
  dod-validator:
    build:
      context: ../../
      dockerfile: docker/cleanroom/Dockerfile
    container_name: uvmgr-dod-cleanroom
    volumes:
      - external-projects:/workdir/external-projects
      - validation-results:/workdir/validation-results
      - validation-reports:/workdir/reports
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
    environment:
      - UVMGR_CLEANROOM=true
      - UVMGR_VALIDATION_MODE=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - otel-collector
      - prometheus
    networks:
      - validation-network

  # OpenTelemetry Collector for observability
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: uvmgr-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    networks:
      - validation-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: uvmgr-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - validation-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: uvmgr-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - validation-network

  # Redis for caching validation results
  redis:
    image: redis:alpine
    container_name: uvmgr-redis
    volumes:
      - redis-data:/data
    networks:
      - validation-network

volumes:
  external-projects:
  validation-results:
  validation-reports:
  prometheus-data:
  grafana-data:
  redis-data:

networks:
  validation-network:
    driver: bridge