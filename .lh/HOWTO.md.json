{
    "sourceFile": "HOWTO.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748296636843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748296636843,
            "name": "Commit-0",
            "content": "# uvmgr: Unified Python Workflow Engine Guide\n\n## Overview\n\nuvmgr is a powerful unified Python workflow engine powered by `uv`, designed to streamline Python project development, testing, and deployment. This guide covers best practices for using uvmgr's features to create and manage Python projects end-to-end.\n\n## Table of Contents\n\n1. [Getting Started](#getting-started)\n2. [Project Lifecycle](#project-lifecycle)\n3. [Development Workflow](#development-workflow)\n4. [Quality Assurance](#quality-assurance)\n5. [Building and Releasing](#building-and-releasing)\n6. [Advanced Features](#advanced-features)\n\n## Getting Started\n\n### Creating a New Project\n\n```bash\n# Create a new project using Copier templates\nuvmgr new my-project\n\n# Or use the project command (alternative)\nuvmgr project my-project\n```\n\nThe template system will guide you through:\n- Project structure setup\n- Dependency management configuration\n- Development tools setup\n- CI/CD pipeline configuration\n\n### Environment Management\n\n```bash\n# Open a Python REPL in your project environment\nuvmgr shell\n\n# Execute a Python script in the project environment\nuvmgr exec script.py\n\n# Run arbitrary tools in the project environment\nuvmgr tool <tool-name>\n```\n\n## Project Lifecycle\n\n### Dependency Management\n\n```bash\n# Add new dependencies\nuvmgr deps add requests pandas\n\n# Upgrade dependencies\nuvmgr deps upgrade\n\n# Remove dependencies\nuvmgr deps remove unused-package\n\n# Manage package indexes\nuvmgr index add https://custom.pypi.org/simple\n```\n\n### Cache Management\n\n```bash\n# Manage uv cache\nuvmgr cache clean\nuvmgr cache list\n```\n\n## Development Workflow\n\n### Development Tasks\n\n```bash\n# Run all development tasks (lint, test, serve)\nuvmgr dev\n\n# Individual tasks\nuvmgr lint    # Run Ruff + MyPy + Pre-commit\nuvmgr test    # Run coverage + pytest\nuvmgr serve   # Start FastAPI dev server\n```\n\n### Code Quality\n\nThe `lint` command runs multiple quality checks:\n- Ruff for fast Python linting\n- MyPy for static type checking\n- Pre-commit hooks for git commit validation\n\n## Quality Assurance\n\n### Testing\n\n```bash\n# Run tests with coverage\nuvmgr test\n\n# Run specific test files\nuvmgr test tests/test_specific.py\n\n# Generate coverage reports\nuvmgr test --coverage\n```\n\n### AI-Assisted Development\n\n```bash\n# Use local or remote Language Models for development\nuvmgr ai <prompt>\n\n# Common use cases:\nuvmgr ai \"Review this code for security issues\"\nuvmgr ai \"Generate test cases for this function\"\n```\n\n## Building and Releasing\n\n### Building Packages\n\n```bash\n# Build wheel and sdist\nuvmgr build\n\n# Build specific formats\nuvmgr build --wheel-only\nuvmgr build --sdist-only\n```\n\n### Release Management\n\n```bash\n# Prepare a new release\nuvmgr release\n\n# The release command uses Commitizen to:\n# - Bump version numbers\n# - Generate changelog\n# - Create git tags\n# - Prepare release notes\n```\n\n## Advanced Features\n\n### Workflow Automation\n\n```bash\n# Execute BPMN workflows\nuvmgr agent run workflow.bpmn\n\n# Schedule tasks using APScheduler\nuvmgr ap-scheduler add \"task_name\" \"cron_expression\"\n```\n\n### Remote Execution\n\n```bash\n# Execute commands on remote systems\nuvmgr remote run <command>\n\n# Note: Remote execution features are under development\n```\n\n## Best Practices\n\n1. **Project Structure**\n   - Use `uvmgr new` to create standardized project layouts\n   - Follow the template's directory structure\n   - Keep dependencies in `pyproject.toml`\n\n2. **Development Workflow**\n   - Run `uvmgr dev` before committing changes\n   - Use `uvmgr lint` to maintain code quality\n   - Leverage `uvmgr ai` for code reviews and improvements\n\n3. **Dependency Management**\n   - Use `uvmgr deps` for all package operations\n   - Keep dependencies up to date with `uvmgr deps upgrade`\n   - Use `uvmgr cache` to manage package caches\n\n4. **Testing and Quality**\n   - Write tests for all new features\n   - Maintain high test coverage\n   - Use `uvmgr test` regularly during development\n\n5. **Release Process**\n   - Use `uvmgr release` for version management\n   - Follow semantic versioning\n   - Keep changelog up to date\n\n## Tips and Tricks\n\n- Use `--json` flag for machine-readable output:\n  ```bash\n  uvmgr --json <command>\n  ```\n\n- Combine commands for efficient workflows:\n  ```bash\n  uvmgr deps add new-package && uvmgr dev\n  ```\n\n- Use the shell for interactive development:\n  ```bash\n  uvmgr shell\n  ```\n\n## Troubleshooting\n\nCommon issues and solutions:\n\n1. **Cache Issues**\n   ```bash\n   uvmgr cache clean\n   ```\n\n2. **Dependency Conflicts**\n   ```bash\n   uvmgr deps upgrade --latest\n   ```\n\n3. **Test Failures**\n   ```bash\n   uvmgr test --verbose\n   ```\n\n## Contributing\n\nTo contribute to uvmgr:\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run `uvmgr dev` to verify\n5. Submit a pull request\n\n## License\n\n[Add appropriate license information]\n\n---\n\nFor more detailed information about specific commands, use:\n```bash\nuvmgr <command> --help\n``` "
        }
    ]
}