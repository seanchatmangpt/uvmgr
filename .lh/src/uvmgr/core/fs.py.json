{
    "sourceFile": "src/uvmgr/core/fs.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748231182835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748231182835,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.core.fs â€“ hashing, atomic writes, temp helpers.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport hashlib\nimport os\nimport shutil\nimport tempfile\nfrom datetime import datetime\nfrom pathlib import Path\n\nfrom .paths import CACHE_DIR\n\n__all__ = [\n    \"hash_file\",\n    \"hash_bytes\",\n    \"hash_str\",\n    \"safe_write\",\n    \"atomic_copy\",\n    \"auto_name\",\n    \"tempfile_in_cache\",\n]\n\n_BLOCK = 1 << 20  # 1 MiB\n\n\ndef _digest(algo: str) -> \"hashlib._Hash\":  # type: ignore[attr-defined]\n    return hashlib.new(algo)\n\n\ndef hash_file(path: Path, *, algo: str = \"sha1\") -> str:\n    h = _digest(algo)\n    with path.open(\"rb\") as fh:\n        while chunk := fh.read(_BLOCK):\n            h.update(chunk)\n    return h.hexdigest()\n\n\ndef hash_bytes(data: bytes, *, algo: str = \"sha1\") -> str:\n    return _digest(algo)(data).hexdigest()\n\n\ndef hash_str(text: str, *, algo: str = \"sha1\") -> str:\n    return hash_bytes(text.encode(), algo=algo)\n\n\ndef safe_write(path: Path, data: str | bytes, *, mode: str | None = None) -> None:\n    tmp = path.with_suffix(path.suffix + \".tmp\")\n    if isinstance(data, str):\n        tmp.write_text(data, encoding=\"utf-8\")\n    else:\n        tmp.write_bytes(data)\n    if mode:\n        tmp.chmod(int(mode, 8))\n    tmp.replace(path)\n\n\ndef atomic_copy(src: Path, dst: Path) -> None:\n    tmp = dst.with_suffix(\".tmp\")\n    shutil.copy2(src, tmp)\n    tmp.replace(dst)\n\n\ndef auto_name(prefix: str, ext: str = \".txt\") -> Path:\n    ts = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    return Path(f\"{prefix}_{ts}{ext}\")\n\n\ndef tempfile_in_cache(*, suffix: str = \"\") -> Path:\n    CACHE_DIR.mkdir(exist_ok=True, parents=True)\n    fd, name = tempfile.mkstemp(dir=CACHE_DIR, suffix=suffix)\n    os.close(fd)\n    return Path(name)\n"
        }
    ]
}