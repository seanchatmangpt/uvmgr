{
    "sourceFile": "src/uvmgr/core/process.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748231227840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748231227840,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.core.process â€“ thin subprocess wrapper with DRY/QUIET flags.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport logging\nimport os\nimport shlex\nimport subprocess\nfrom pathlib import Path\nfrom typing import Sequence\n\nfrom .shell import colour\nfrom .telemetry import span\n\n__all__ = [\"run\", \"run_logged\", \"which\"]\n\n_log = logging.getLogger(\"uvmgr.process\")\n\n\ndef _to_str(cmd: str | Sequence[str]) -> str:\n    return cmd if isinstance(cmd, str) else \" \".join(cmd)\n\n\ndef run(cmd: str | Sequence[str], *, capture: bool = False, cwd: Path | None = None) -> str | None:\n    cmd_str = _to_str(cmd)\n    if os.getenv(\"UVMGR_DRY\") == \"1\":\n        colour(f\"[dry] {cmd_str}\", \"yellow\")\n        return \"\"\n    kw = dict(cwd=str(cwd) if cwd else None, text=True)\n    if capture or os.getenv(\"UVMGR_QUIET\"):\n        kw |= dict(stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    with span(\"subprocess\", cmd=cmd_str):\n        res = subprocess.run(shlex.split(cmd_str), check=True, **kw)\n    return res.stdout if capture else None\n\n\ndef run_logged(cmd: str | Sequence[str], **kw):\n    colour(f\"$ {_to_str(cmd)}\", \"cyan\")\n    return run(cmd, **kw)\n\n\ndef which(binary: str) -> str | None:\n    import shutil\n\n    return shutil.which(binary)\n"
        }
    ]
}