{
    "sourceFile": "src/uvmgr/core/shell.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748231199496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748246036187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,21 @@\n \"\"\"\n-uvmgr.core.shell – Rich console helpers.\n+uvmgr.core.shell\n+================\n+\n+Utility helpers that wrap **Rich** so every layer of *uvmgr* can print\n+pretty output without repeating boiler-plate.\n+\n+• `colour(text, style)`     – one-liner style wrapper  \n+• `dump_json(obj)`          – syntax-highlighted JSON  \n+• `markdown(md)`            – render Markdown with headings, lists, etc.  \n+• `rich_table(headers, rows)` – quick table helper  \n+• `progress_bar(total)`     – context-manager for a progress bar  \n+• `timed(fn)`               – decorator that times a call and prints ✔ …s  \n+• `install_rich()`          – enable Rich tracebacks\n+\n+All functions follow the *happy-path only* rule: no error handling, no\n+return values unless useful.\n \"\"\"\n \n from __future__ import annotations\n \n@@ -11,63 +26,100 @@\n from typing import Any\n \n from rich.console import Console\n from rich.json import JSON as RichJSON\n+from rich.markdown import Markdown\n from rich.progress import Progress\n from rich.table import Table\n from rich.traceback import install as _install_tb\n \n __all__ = [\n     \"colour\",\n     \"dump_json\",\n     \"install_rich\",\n+    \"markdown\",\n     \"progress_bar\",\n     \"rich_table\",\n     \"timed\",\n ]\n \n+# One global console instance – reuse it everywhere\n _console = Console(highlight=False)\n \n \n+# --------------------------------------------------------------------------- #\n+# Core helpers\n+# --------------------------------------------------------------------------- #\n def install_rich(show_locals: bool = False) -> None:\n+    \"\"\"Activate Rich tracebacks (call once, idempotent).\"\"\"\n     _install_tb(show_locals=show_locals)\n \n \n def colour(text: str, style: str = \"green\", *, nl: bool = True) -> None:\n+    \"\"\"Print *text* in *style* colour (defaults to green).\"\"\"\n     _console.print(text, style=style, end=\"\\n\" if nl else \"\")\n \n \n def dump_json(obj: Any) -> None:\n+    \"\"\"Pretty-print a Python object as syntax-highlighted JSON.\"\"\"\n     _console.print(RichJSON(json.dumps(obj, default=str, indent=2)))\n \n \n+def markdown(md: str) -> None:\n+    \"\"\"Render Markdown *md* via Rich (headings, lists, code blocks…).\"\"\"\n+    _console.print(Markdown(md))\n+\n+\n def timed(fn: Callable[..., Any]) -> Callable[..., Any]:\n+    \"\"\"\n+    Decorator: run *fn*, then print “✔ fn_name 1.23s” in green.\n+\n+    Usage\n+    -----\n+    @timed\n+    def build():\n+        ...\n+    \"\"\"\n     @wraps(fn)\n     def _wrap(*a, **kw):\n         t0 = time.perf_counter()\n         try:\n             return fn(*a, **kw)\n         finally:\n-            colour(f\"✔ {fn.__name__} {(time.perf_counter()-t0):.2f}s\", \"green\")\n+            colour(f\"✔ {fn.__name__} {(time.perf_counter() - t0):.2f}s\", \"green\")\n \n     return _wrap\n \n \n+# --------------------------------------------------------------------------- #\n+# Rich convenience wrappers\n+# --------------------------------------------------------------------------- #\n def rich_table(headers: Sequence[str], rows: Iterable[Sequence[Any]]) -> None:\n+    \"\"\"Quickly render a table given *headers* and an iterable of *rows*.\"\"\"\n     t = Table(*headers, header_style=\"bold magenta\")\n     for r in rows:\n         t.add_row(*map(str, r))\n     _console.print(t)\n \n \n def progress_bar(total: int):\n+    \"\"\"\n+    Context-manager yielding a callable *advance()* that increments the bar.\n+\n+    Example\n+    -------\n+    with progress_bar(10) as advance:\n+        for _ in range(10):\n+            work()\n+            advance()\n+    \"\"\"\n     class _Ctx:\n         def __enter__(self):\n-            self.p = Progress()\n-            self.p.__enter__()\n-            self.task = self.p.add_task(\"work\", total=total)\n-            return lambda inc=1: self.p.update(self.task, advance=inc)\n+            self._p = Progress()\n+            self._p.__enter__()\n+            self._task = self._p.add_task(\"work\", total=total)\n+            return lambda inc=1: self._p.update(self._task, advance=inc)\n \n         def __exit__(self, exc_type, exc, tb):\n-            return self.p.__exit__(exc_type, exc, tb)\n+            return self._p.__exit__(exc_type, exc, tb)\n \n     return _Ctx()\n"
                }
            ],
            "date": 1748231199496,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.core.shell – Rich console helpers.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nimport time\nfrom functools import wraps\nfrom typing import Any, Callable, Iterable, Sequence\n\nfrom rich.console import Console\nfrom rich.json import JSON as RichJSON\nfrom rich.progress import Progress\nfrom rich.table import Table\nfrom rich.traceback import install as _install_tb\n\n__all__ = [\n    \"install_rich\",\n    \"colour\",\n    \"dump_json\",\n    \"timed\",\n    \"rich_table\",\n    \"progress_bar\",\n]\n\n_console = Console(highlight=False)\n\n\ndef install_rich(show_locals: bool = False) -> None:\n    _install_tb(show_locals=show_locals)\n\n\ndef colour(text: str, style: str = \"green\", *, nl: bool = True) -> None:\n    _console.print(text, style=style, end=\"\\n\" if nl else \"\")\n\n\ndef dump_json(obj: Any) -> None:\n    _console.print(RichJSON(json.dumps(obj, default=str, indent=2)))\n\n\ndef timed(fn: Callable[..., Any]) -> Callable[..., Any]:\n    @wraps(fn)\n    def _wrap(*a, **kw):\n        t0 = time.perf_counter()\n        try:\n            return fn(*a, **kw)\n        finally:\n            colour(f\"✔ {fn.__name__} {(time.perf_counter()-t0):.2f}s\", \"green\")\n\n    return _wrap\n\n\ndef rich_table(headers: Sequence[str], rows: Iterable[Sequence[Any]]) -> None:\n    t = Table(*headers, header_style=\"bold magenta\")\n    for r in rows:\n        t.add_row(*map(str, r))\n    _console.print(t)\n\n\ndef progress_bar(total: int):\n    class _Ctx:\n        def __enter__(self):\n            self.p = Progress()\n            self.p.__enter__()\n            self.task = self.p.add_task(\"work\", total=total)\n            return lambda inc=1: self.p.update(self.task, advance=inc)\n\n        def __exit__(self, exc_type, exc, tb):\n            return self.p.__exit__(exc_type, exc, tb)\n\n    return _Ctx()\n"
        }
    ]
}