{
    "sourceFile": "src/uvmgr/core/history.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748231291591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748231291591,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.core.history – recent artefact tracker (≤100 entries).\n\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nimport os\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import List\n\nfrom .paths import CONFIG_DIR\nfrom .shell import rich_table\n\nHIST: Path = CONFIG_DIR / \"history.json\"\n\n\ndef _load() -> list[dict]:\n    return json.loads(HIST.read_text()) if HIST.exists() else []\n\n\ndef log_output(p: Path) -> None:\n    recs = _load()\n    recs.append({\"ts\": datetime.now().isoformat(), \"file\": str(p)})\n    HIST.write_text(json.dumps(recs[-100:]))\n\n\ndef last_files(n: int = 5) -> List[Path]:\n    return [Path(r[\"file\"]) for r in _load()[-n:]]\n\n\ndef history_menu(n: int = 10) -> None:\n    files = last_files(n)\n    rich_table([\"#\", \"file\"], [(i + 1, f) for i, f in enumerate(files)])\n    try:\n        sel = int(input(\"Open which? \")) - 1\n        os.system(f\"${{EDITOR:-nano}} '{files[sel]}'\")\n    except (ValueError, IndexError):\n        print(\"cancelled\")\n"
        }
    ]
}