{
    "sourceFile": "src/uvmgr/core/telemetry.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748231336310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748237292410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+\"\"\"\n+uvmgr.core.telemetry\n+--------------------\n+Logging bootstrap + (optional) OpenTelemetry exporter.\n+\n+*  Always exports ``setup_logging`` – used by `uvmgr.cli`.\n+*  Exports context-manager ``span(name, **attrs)`` that becomes a real OTEL\n+   span **iff** `opentelemetry-sdk` is installed *and* the environment sets\n+   `OTEL_EXPORTER_OTLP_ENDPOINT`.  Otherwise it degrades to a no-op.\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+import os\n+import platform\n+from contextlib import contextmanager\n+from typing import Any, Callable\n+\n+# --------------------------------------------------------------------------- #\n+# Public helper: plain logging                                                #\n+# --------------------------------------------------------------------------- #\n+def setup_logging(level: str = \"INFO\") -> None:\n+    \"\"\"\n+    Initialise root logging once, idempotently.  Called by `uvmgr.cli` on\n+    start-up.\n+    \"\"\"\n+    if logging.getLogger().handlers:\n+        return  # already configured\n+\n+    logging.basicConfig(\n+        level=getattr(logging, level.upper(), logging.INFO),\n+        format=\"%(asctime)s %(levelname)-8s %(name)s │ %(message)s\",\n+        datefmt=\"%H:%M:%S\",\n+    )\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Optional OpenTelemetry                                                      #\n+# --------------------------------------------------------------------------- #\n+try:\n+    from opentelemetry import metrics, trace\n+    from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\n+    from opentelemetry.sdk.resources import Resource\n+    from opentelemetry.sdk.trace import TracerProvider\n+    from opentelemetry.sdk.trace.export import BatchSpanProcessor\n+\n+    _RESOURCE = Resource.create(\n+        {\n+            \"service.name\": \"uvmgr\",\n+            \"service.instance.id\": os.getenv(\"HOSTNAME\", \"localhost\"),\n+            \"os.type\": platform.system().lower(),\n+        }\n+    )\n+    _PROVIDER = TracerProvider(resource=_RESOURCE)\n+    _PROVIDER.add_span_processor(BatchSpanProcessor(OTLPSpanExporter()))\n+    trace.set_tracer_provider(_PROVIDER)\n+    _TRACER = trace.get_tracer(\"uvmgr\")\n+\n+    @contextmanager\n+    def span(name: str, **attrs: Any):\n+        with _TRACER.start_as_current_span(name, attributes=attrs):\n+            yield\n+\n+    def metric_counter(name: str) -> Callable[[int], None]:\n+        return metrics.get_meter(\"uvmgr\").create_counter(name).add\n+\n+except ImportError:  # SDK not installed – degrade gracefully\n+\n+    @contextmanager\n+    def span(name: str, **attrs: Any):  # type: ignore[arg-type]\n+        yield\n+\n+    def metric_counter(name: str):  # type: ignore[return-value]\n+        def _noop(_=1, **__): ...\n+        return _noop\n"
                }
            ],
            "date": 1748231336310,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.core.telemetry – Rich logger + optional OTLP exporter.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport logging\nimport platform\nfrom contextlib import contextmanager\nfrom typing import Any\n\nlogger = logging.getLogger(\"uvmgr\")\nlogging.basicConfig(\n    format=\"%(asctime)s %(levelname)-8s %(name)s │ %(message)s\",\n    datefmt=\"%H:%M:%S\",\n    level=logging.INFO,\n)\n\ntry:\n    from opentelemetry import trace\n    from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\n    from opentelemetry.sdk.resources import Resource\n    from opentelemetry.sdk.trace import TracerProvider\n    from opentelemetry.sdk.trace.export import BatchSpanProcessor\n\n    res = Resource.create({\"service.name\": \"uvmgr\", \"os\": platform.system()})\n    provider = TracerProvider(resource=res)\n    provider.add_span_processor(BatchSpanProcessor(OTLPSpanExporter()))\n    trace.set_tracer_provider(provider)\n    _tr = trace.get_tracer(\"uvmgr\")\n\n    @contextmanager\n    def span(name: str, **attrs: Any):\n        with _tr.start_as_current_span(name, attributes=attrs):\n            yield\n\nexcept ImportError:\n\n    @contextmanager\n    def span(name: str, **attrs: Any):\n        yield\n"
        }
    ]
}