{
    "sourceFile": "src/uvmgr/runtime/agent/spiff.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1748241035370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748241493995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+\"\"\"\n+Execute BPMN workflows with SpiffWorkflow.\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+from pathlib import Path\n+\n+from spiffworkflow.bpmn.parser import BpmnParser\n+from spiffworkflow.bpmn.workflow import BpmnWorkflow\n+\n+from uvmgr.core.shell import colour\n+\n+\n+def _load(path: Path) -> BpmnWorkflow:\n+    parser = BpmnParser()\n+    parser.add_bpmn_xml_file(str(path))\n+    wf_spec = parser.get_spec(\"\")\n+    return BpmnWorkflow(wf_spec)\n+\n+\n+def _step(wf: BpmnWorkflow) -> None:\n+    # User tasks\n+    for task in wf.get_ready_user_tasks():\n+        colour(f\"⏸  waiting for user task: {task}\", \"yellow\")\n+        input(\"Press <Enter> when done …\")\n+        wf.complete_task_from_id(task.id)\n+\n+    # Service tasks\n+    for task in wf.get_ready_service_tasks():\n+        colour(f\"↻  auto-completing service task: {task}\", \"cyan\")\n+        wf.complete_task_from_id(task.id)\n+\n+\n+def run_bpmn(path: Path) -> None:\n+    wf = _load(path)\n+    while not wf.is_completed():\n+        _step(wf)\n+    colour(\"✔ BPMN workflow completed\", \"green\")\n"
                },
                {
                    "date": 1748242075411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from __future__ import annotations\n \n from pathlib import Path\n \n-from spiffworkflow.bpmn.parser import BpmnParser\n+from Spiffworkflow.bpmn.parser import BpmnParser\n from spiffworkflow.bpmn.workflow import BpmnWorkflow\n \n from uvmgr.core.shell import colour\n \n@@ -36,43 +36,4 @@\n     wf = _load(path)\n     while not wf.is_completed():\n         _step(wf)\n     colour(\"✔ BPMN workflow completed\", \"green\")\n-\"\"\"\n-Execute BPMN workflows with SpiffWorkflow.\n-\"\"\"\n-\n-from __future__ import annotations\n-\n-from pathlib import Path\n-\n-from spiffworkflow.bpmn.parser import BpmnParser\n-from spiffworkflow.bpmn.workflow import BpmnWorkflow\n-\n-from uvmgr.core.shell import colour\n-\n-\n-def _load(path: Path) -> BpmnWorkflow:\n-    parser = BpmnParser()\n-    parser.add_bpmn_xml_file(str(path))\n-    wf_spec = parser.get_spec(\"\")\n-    return BpmnWorkflow(wf_spec)\n-\n-\n-def _step(wf: BpmnWorkflow) -> None:\n-    # User tasks\n-    for task in wf.get_ready_user_tasks():\n-        colour(f\"⏸  waiting for user task: {task}\", \"yellow\")\n-        input(\"Press <Enter> when done …\")\n-        wf.complete_task_from_id(task.id)\n-\n-    # Service tasks\n-    for task in wf.get_ready_service_tasks():\n-        colour(f\"↻  auto-completing service task: {task}\", \"cyan\")\n-        wf.complete_task_from_id(task.id)\n-\n-\n-def run_bpmn(path: Path) -> None:\n-    wf = _load(path)\n-    while not wf.is_completed():\n-        _step(wf)\n-    colour(\"✔ BPMN workflow completed\", \"green\")\n"
                },
                {
                    "date": 1748242081284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n from __future__ import annotations\n \n from pathlib import Path\n \n-from Spiffworkflow.bpmn.parser import BpmnParser\n-from spiffworkflow.bpmn.workflow import BpmnWorkflow\n+from SpiffWorkflow.bpmn.parser import BpmnParser\n+from SpiffWorkflow.bpmn.workflow import BpmnWorkflow\n \n from uvmgr.core.shell import colour\n \n \n"
                }
            ],
            "date": 1748241035370,
            "name": "Commit-0",
            "content": "\"\"\"\nExecute BPMN workflows with SpiffWorkflow.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nfrom spiffworkflow.bpmn.parser import BpmnParser\nfrom spiffworkflow.bpmn.workflow import BpmnWorkflow\n\nfrom uvmgr.core.shell import colour\n\n\ndef _load(path: Path) -> BpmnWorkflow:\n    parser = BpmnParser()\n    parser.add_bpmn_xml_file(str(path))\n    wf_spec = parser.get_spec(\"\")\n    return BpmnWorkflow(wf_spec)\n\n\ndef _step(wf: BpmnWorkflow) -> None:\n    # User tasks\n    for task in wf.get_ready_user_tasks():\n        colour(f\"⏸  waiting for user task: {task}\", \"yellow\")\n        input(\"Press <Enter> when done …\")\n        wf.complete_task_from_id(task.id)\n\n    # Service tasks\n    for task in wf.get_ready_service_tasks():\n        colour(f\"↻  auto-completing service task: {task}\", \"cyan\")\n        wf.complete_task_from_id(task.id)\n\n\ndef run_bpmn(path: Path) -> None:\n    wf = _load(path)\n    while not wf.is_completed():\n        _step(wf)\n    colour(\"✔ BPMN workflow completed\", \"green\")\n"
        }
    ]
}