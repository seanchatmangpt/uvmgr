{
    "sourceFile": "src/uvmgr/runtime/agent.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748241414610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748241526333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+\"\"\"\n+uvmgr.runtime.agent\n+===================\n+\n+Facade for BPMN workflow execution.\n+\n+The heavy lifting lives in :pymod:`uvmgr.runtime.agent.spiff`, which uses\n+**SpiffWorkflow** under the hood.  Keeping this thin wrapper lets us swap\n+in alternative engines later (Camunda REST, Zeebe, etc.) without touching\n+the ops/cli layers.\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+from pathlib import Path\n+\n+from uvmgr.runtime.agent.spiff import run_bpmn as _backend_run_bpmn\n+\n+\n+def run(path: Path) -> None:                # happy-path wrapper\n+    \"\"\"Execute *path* (a ``.bpmn`` file) until the workflow finishes.\"\"\"\n+    _backend_run_bpmn(path)\n+\n+\n+__all__ = [\"run\"]\n"
                },
                {
                    "date": 1748241724507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,29 +22,4 @@\n     _backend_run_bpmn(path)\n \n \n __all__ = [\"run\"]\n-\"\"\"\n-uvmgr.runtime.agent\n-===================\n-\n-Facade for BPMN workflow execution.\n-\n-The heavy lifting lives in :pymod:`uvmgr.runtime.agent.spiff`, which uses\n-**SpiffWorkflow** under the hood.  Keeping this thin wrapper lets us swap\n-in alternative engines later (Camunda REST, Zeebe, etc.) without touching\n-the ops/cli layers.\n-\"\"\"\n-\n-from __future__ import annotations\n-\n-from pathlib import Path\n-\n-from uvmgr.runtime.agent import spiff as _backend\n-\n-\n-def run(path: Path) -> None:                # happy-path wrapper\n-    \"\"\"Execute *path* (a ``.bpmn`` file) until the workflow finishes.\"\"\"\n-    _backend.run_bpmn(path)\n-\n-\n-__all__ = [\"run\"]\n"
                }
            ],
            "date": 1748241414610,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.runtime.agent\n===================\n\nFacade for BPMN workflow execution.\n\nThe heavy lifting lives in :pymod:`uvmgr.runtime.agent.spiff`, which uses\n**SpiffWorkflow** under the hood.  Keeping this thin wrapper lets us swap\nin alternative engines later (Camunda REST, Zeebe, etc.) without touching\nthe ops/cli layers.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nfrom uvmgr.runtime.agent import spiff as _backend\n\n\ndef run(path: Path) -> None:                # happy-path wrapper\n    \"\"\"Execute *path* (a ``.bpmn`` file) until the workflow finishes.\"\"\"\n    _backend.run_bpmn(path)\n\n\n__all__ = [\"run\"]\n"
        }
    ]
}