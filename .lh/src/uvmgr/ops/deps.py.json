{
    "sourceFile": "src/uvmgr/ops/deps.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748231899977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748234157876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+\"\"\"\n+uvmgr.ops.deps\n+--------------\n+User-facing dependency orchestration (uv add / remove / upgrade / list).\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import List\n+\n+from uvmgr.core.shell import timed\n+from uvmgr.core.telemetry import span\n+from uvmgr.ops import uv as _rt\n+\n+_log = logging.getLogger(\"uvmgr.ops.deps\")\n+\n+\n+@timed\n+def add(pkgs: List[str], *, dev: bool = False) -> dict:\n+    with span(\"deps.add\", pkgs=\" \".join(pkgs), dev=dev):\n+        _rt.add(pkgs, dev=dev)\n+    _log.debug(\"Added %s (dev=%s)\", pkgs, dev)\n+    return {\"added\": pkgs, \"dev\": dev}\n+\n+\n+@timed\n+def remove(pkgs: List[str]) -> dict:\n+    with span(\"deps.remove\", pkgs=\" \".join(pkgs)):\n+        _rt.remove(pkgs)\n+    _log.debug(\"Removed %s\", pkgs)\n+    return {\"removed\": pkgs}\n+\n+\n+@timed\n+def upgrade(*, all_pkgs: bool = False, pkgs: List[str] | None = None) -> dict:\n+    with span(\"deps.upgrade\", all=all_pkgs, pkgs=pkgs):\n+        _rt.upgrade(all_pkgs=all_pkgs, pkgs=pkgs)\n+    _log.debug(\"Upgraded %s\", \"all packages\" if all_pkgs else pkgs)\n+    return {\"upgraded\": \"all\" if all_pkgs else pkgs}\n+\n+\n+def list_pkgs() -> list[str]:\n+    \"\"\"Return the current dependency list as plain strings.\"\"\"\n+    txt = _rt.list_pkgs()\n+    _log.debug(\"Listed %d packages\", len(txt.splitlines()))\n+    return txt.splitlines()\n"
                },
                {
                    "date": 1748365929958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,31 +10,31 @@\n from typing import List\n \n from uvmgr.core.shell import timed\n from uvmgr.core.telemetry import span\n-from uvmgr.ops import uv as _rt\n+from uvmgr.runtime import uv as _rt\n \n _log = logging.getLogger(\"uvmgr.ops.deps\")\n \n \n @timed\n-def add(pkgs: list[str], *, dev: bool = False) -> dict:\n+def add(pkgs: List[str], *, dev: bool = False) -> dict:\n     with span(\"deps.add\", pkgs=\" \".join(pkgs), dev=dev):\n         _rt.add(pkgs, dev=dev)\n     _log.debug(\"Added %s (dev=%s)\", pkgs, dev)\n     return {\"added\": pkgs, \"dev\": dev}\n \n \n @timed\n-def remove(pkgs: list[str]) -> dict:\n+def remove(pkgs: List[str]) -> dict:\n     with span(\"deps.remove\", pkgs=\" \".join(pkgs)):\n         _rt.remove(pkgs)\n     _log.debug(\"Removed %s\", pkgs)\n     return {\"removed\": pkgs}\n \n \n @timed\n-def upgrade(*, all_pkgs: bool = False, pkgs: list[str] | None = None) -> dict:\n+def upgrade(*, all_pkgs: bool = False, pkgs: List[str] | None = None) -> dict:\n     with span(\"deps.upgrade\", all=all_pkgs, pkgs=pkgs):\n         _rt.upgrade(all_pkgs=all_pkgs, pkgs=pkgs)\n     _log.debug(\"Upgraded %s\", \"all packages\" if all_pkgs else pkgs)\n     return {\"upgraded\": \"all\" if all_pkgs else pkgs}\n"
                }
            ],
            "date": 1748231899977,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.ops.deps\n--------------\nUser-facing dependency orchestration (uv add / remove / upgrade / list).\n\"\"\"\n\nfrom __future__ import annotations\n\nimport logging\nfrom typing import List\n\nfrom uvmgr.core.shell import timed\nfrom uvmgr.core.telemetry import span\nfrom uvmgr.runtime import uv as _rt\n\n_log = logging.getLogger(\"uvmgr.ops.deps\")\n\n\n@timed\ndef add(pkgs: List[str], *, dev: bool = False) -> dict:\n    with span(\"deps.add\", pkgs=\" \".join(pkgs), dev=dev):\n        _rt.add(pkgs, dev=dev)\n    _log.debug(\"Added %s (dev=%s)\", pkgs, dev)\n    return {\"added\": pkgs, \"dev\": dev}\n\n\n@timed\ndef remove(pkgs: List[str]) -> dict:\n    with span(\"deps.remove\", pkgs=\" \".join(pkgs)):\n        _rt.remove(pkgs)\n    _log.debug(\"Removed %s\", pkgs)\n    return {\"removed\": pkgs}\n\n\n@timed\ndef upgrade(*, all_pkgs: bool = False, pkgs: List[str] | None = None) -> dict:\n    with span(\"deps.upgrade\", all=all_pkgs, pkgs=pkgs):\n        _rt.upgrade(all_pkgs=all_pkgs, pkgs=pkgs)\n    _log.debug(\"Upgraded %s\", \"all packages\" if all_pkgs else pkgs)\n    return {\"upgraded\": \"all\" if all_pkgs else pkgs}\n\n\ndef list_pkgs() -> list[str]:\n    \"\"\"Return the current dependency list as plain strings.\"\"\"\n    txt = _rt.list_pkgs()\n    _log.debug(\"Listed %d packages\", len(txt.splitlines()))\n    return txt.splitlines()\n"
        }
    ]
}