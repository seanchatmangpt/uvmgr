{
    "sourceFile": "src/uvmgr/ops/uv.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748234157915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748238396802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,38 @@\n \"\"\"\n-uvmgr.ops.deps\n---------------\n-User-facing dependency orchestration (uv add / remove / upgrade / list).\n+uvmgr.ops.uv\n+============\n+Thin orchestration wrapper around *runtime.uv*.\n+\n+• Never spawns processes directly – delegates to `uvmgr.runtime.uv.call`\n+• Returns JSON-safe data so the CLI layer can decide how to display it\n \"\"\"\n \n from __future__ import annotations\n \n-import logging\n-from typing import List\n+from pathlib import Path\n+from typing import Sequence\n \n from uvmgr.core.shell import timed\n-from uvmgr.core.telemetry import span\n-from uvmgr.ops import uv as _rt\n+from uvmgr.runtime import uv as _rt\n \n-_log = logging.getLogger(\"uvmgr.ops.deps\")\n \n-\n @timed\n-def add(pkgs: List[str], *, dev: bool = False) -> dict:\n-    with span(\"deps.add\", pkgs=\" \".join(pkgs), dev=dev):\n-        _rt.add(pkgs, dev=dev)\n-    _log.debug(\"Added %s (dev=%s)\", pkgs, dev)\n-    return {\"added\": pkgs, \"dev\": dev}\n+def call(args: str | Sequence[str], *, capture: bool = False) -> str | None:\n+    \"\"\"\n+    Invoke the ``uv`` CLI inside the project’s virtual-env.\n \n+    Parameters\n+    ----------\n+    args\n+        Either a single string (e.g. ``\"pip list\"``) or a list of tokens\n+        (e.g. ``[\"pip\", \"install\", \"-e\", \".\"]``).\n+    capture\n+        When *True* the subprocess output is returned; otherwise it streams\n+        to the terminal.\n \n-@timed\n-def remove(pkgs: List[str]) -> dict:\n-    with span(\"deps.remove\", pkgs=\" \".join(pkgs)):\n-        _rt.remove(pkgs)\n-    _log.debug(\"Removed %s\", pkgs)\n-    return {\"removed\": pkgs}\n-\n-\n-@timed\n-def upgrade(*, all_pkgs: bool = False, pkgs: List[str] | None = None) -> dict:\n-    with span(\"deps.upgrade\", all=all_pkgs, pkgs=pkgs):\n-        _rt.upgrade(all_pkgs=all_pkgs, pkgs=pkgs)\n-    _log.debug(\"Upgraded %s\", \"all packages\" if all_pkgs else pkgs)\n-    return {\"upgraded\": \"all\" if all_pkgs else pkgs}\n-\n-\n-def list_pkgs() -> list[str]:\n-    \"\"\"Return the current dependency list as plain strings.\"\"\"\n-    txt = _rt.list_pkgs()\n-    _log.debug(\"Listed %d packages\", len(txt.splitlines()))\n-    return txt.splitlines()\n+    Returns\n+    -------\n+    str | None\n+        Captured stdout if *capture* is True, else **None**.\n+    \"\"\"\n+    return _rt.call(args, capture=capture)\n"
                },
                {
                    "date": 1748365922129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n @timed\n def call(args: str | Sequence[str], *, capture: bool = False) -> str | None:\n     \"\"\"\n-    Invoke the ``uv`` CLI inside the project’s virtual-env.\n+    Invoke the ``uv`` CLI inside the project's virtual-env.\n \n     Parameters\n     ----------\n     args\n"
                }
            ],
            "date": 1748234157915,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.ops.deps\n--------------\nUser-facing dependency orchestration (uv add / remove / upgrade / list).\n\"\"\"\n\nfrom __future__ import annotations\n\nimport logging\nfrom typing import List\n\nfrom uvmgr.core.shell import timed\nfrom uvmgr.core.telemetry import span\nfrom uvmgr.ops import uv as _rt\n\n_log = logging.getLogger(\"uvmgr.ops.deps\")\n\n\n@timed\ndef add(pkgs: List[str], *, dev: bool = False) -> dict:\n    with span(\"deps.add\", pkgs=\" \".join(pkgs), dev=dev):\n        _rt.add(pkgs, dev=dev)\n    _log.debug(\"Added %s (dev=%s)\", pkgs, dev)\n    return {\"added\": pkgs, \"dev\": dev}\n\n\n@timed\ndef remove(pkgs: List[str]) -> dict:\n    with span(\"deps.remove\", pkgs=\" \".join(pkgs)):\n        _rt.remove(pkgs)\n    _log.debug(\"Removed %s\", pkgs)\n    return {\"removed\": pkgs}\n\n\n@timed\ndef upgrade(*, all_pkgs: bool = False, pkgs: List[str] | None = None) -> dict:\n    with span(\"deps.upgrade\", all=all_pkgs, pkgs=pkgs):\n        _rt.upgrade(all_pkgs=all_pkgs, pkgs=pkgs)\n    _log.debug(\"Upgraded %s\", \"all packages\" if all_pkgs else pkgs)\n    return {\"upgraded\": \"all\" if all_pkgs else pkgs}\n\n\ndef list_pkgs() -> list[str]:\n    \"\"\"Return the current dependency list as plain strings.\"\"\"\n    txt = _rt.list_pkgs()\n    _log.debug(\"Listed %d packages\", len(txt.splitlines()))\n    return txt.splitlines()\n"
        }
    ]
}