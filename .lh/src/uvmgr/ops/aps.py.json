{
    "sourceFile": "src/uvmgr/ops/aps.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748241665778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748241763377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+\"\"\"\n+uvmgr.ops.aps\n+============\n+\n+Operations for APScheduler integration.\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+from typing import Any, Dict, List\n+\n+from apscheduler.schedulers.background import BackgroundScheduler\n+from apscheduler.triggers.cron import CronTrigger\n+from apscheduler.triggers.interval import IntervalTrigger\n+\n+# Global scheduler instance (lazy-loaded)\n+_scheduler: BackgroundScheduler | None = None\n+\n+\n+def get_scheduler() -> BackgroundScheduler:\n+    \"\"\"Get or create the global scheduler instance.\"\"\"\n+    global _scheduler\n+    if _scheduler is None:\n+        _scheduler = BackgroundScheduler()\n+    if not _scheduler.running:\n+        _scheduler.start()\n+    return _scheduler\n+\n+\n+def add_cron(job_id: str, cron: str, cmd: str) -> None:\n+    \"\"\"Add a cron job to the scheduler.\"\"\"\n+    get_scheduler().add_job(\n+        _run_cmd,\n+        CronTrigger.from_crontab(cron),\n+        id=job_id,\n+        args=[cmd],\n+        replace_existing=True,\n+    )\n+\n+\n+def add_interval(job_id: str, seconds: int, cmd: str) -> None:\n+    \"\"\"Add an interval job to the scheduler.\"\"\"\n+    get_scheduler().add_job(\n+        _run_cmd,\n+        IntervalTrigger(seconds=seconds),\n+        id=job_id,\n+        args=[cmd],\n+        replace_existing=True,\n+    )\n+\n+\n+def remove(job_id: str) -> None:\n+    \"\"\"Remove a job from the scheduler.\"\"\"\n+    if _scheduler is not None:\n+        _scheduler.remove_job(job_id)\n+\n+\n+def list_jobs() -> List[str]:\n+    \"\"\"List all scheduled jobs.\"\"\"\n+    if _scheduler is None:\n+        return []\n+    return [f\"{j.id}: {j.trigger}\" for j in _scheduler.get_jobs()]\n+\n+\n+def _run_cmd(cmd: str) -> None:\n+    \"\"\"Execute a command string.\"\"\"\n+    import subprocess\n+    subprocess.run(cmd, shell=True, check=True)\n+\n+\n+def run() -> None:\n+    \"\"\"Run the scheduler (blocking).\"\"\"\n+    scheduler = get_scheduler()\n+    scheduler.print_jobs()\n+    try:\n+        while True:\n+            import time\n+            time.sleep(1)\n+    except (KeyboardInterrupt, SystemExit):\n+        scheduler.shutdown()\n+        global _scheduler\n+        _scheduler = None \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748241877321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,73 +78,5 @@\n             time.sleep(1)\n     except (KeyboardInterrupt, SystemExit):\n         scheduler.shutdown()\n         global _scheduler\n-        _scheduler = None \n-\"\"\"\n-uvmgr.ops.aps\n-============\n-\n-Operations for APScheduler integration.\n-\"\"\"\n-\n-from __future__ import annotations\n-\n-from typing import Any, Dict, List\n-\n-from apscheduler.schedulers.background import BackgroundScheduler\n-from apscheduler.triggers.cron import CronTrigger\n-from apscheduler.triggers.interval import IntervalTrigger\n-\n-# Global scheduler instance\n-_scheduler = BackgroundScheduler()\n-_scheduler.start()\n-\n-\n-def add_cron(job_id: str, cron: str, cmd: str) -> None:\n-    \"\"\"Add a cron job to the scheduler.\"\"\"\n-    _scheduler.add_job(\n-        _run_cmd,\n-        CronTrigger.from_crontab(cron),\n-        id=job_id,\n-        args=[cmd],\n-        replace_existing=True,\n-    )\n-\n-\n-def add_interval(job_id: str, seconds: int, cmd: str) -> None:\n-    \"\"\"Add an interval job to the scheduler.\"\"\"\n-    _scheduler.add_job(\n-        _run_cmd,\n-        IntervalTrigger(seconds=seconds),\n-        id=job_id,\n-        args=[cmd],\n-        replace_existing=True,\n-    )\n-\n-\n-def remove(job_id: str) -> None:\n-    \"\"\"Remove a job from the scheduler.\"\"\"\n-    _scheduler.remove_job(job_id)\n-\n-\n-def list_jobs() -> List[str]:\n-    \"\"\"List all scheduled jobs.\"\"\"\n-    return [f\"{j.id}: {j.trigger}\" for j in _scheduler.get_jobs()]\n-\n-\n-def _run_cmd(cmd: str) -> None:\n-    \"\"\"Execute a command string.\"\"\"\n-    import subprocess\n-    subprocess.run(cmd, shell=True, check=True)\n-\n-\n-def run() -> None:\n-    \"\"\"Run the scheduler (blocking).\"\"\"\n-    _scheduler.print_jobs()\n-    try:\n-        _scheduler.start()\n-        while True:\n-            import time\n-            time.sleep(1)\n-    except (KeyboardInterrupt, SystemExit):\n-        _scheduler.shutdown() \n\\ No newline at end of file\n+        _scheduler = None \n\\ No newline at end of file\n"
                }
            ],
            "date": 1748241665778,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.ops.aps\n============\n\nOperations for APScheduler integration.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any, Dict, List\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom apscheduler.triggers.interval import IntervalTrigger\n\n# Global scheduler instance\n_scheduler = BackgroundScheduler()\n_scheduler.start()\n\n\ndef add_cron(job_id: str, cron: str, cmd: str) -> None:\n    \"\"\"Add a cron job to the scheduler.\"\"\"\n    _scheduler.add_job(\n        _run_cmd,\n        CronTrigger.from_crontab(cron),\n        id=job_id,\n        args=[cmd],\n        replace_existing=True,\n    )\n\n\ndef add_interval(job_id: str, seconds: int, cmd: str) -> None:\n    \"\"\"Add an interval job to the scheduler.\"\"\"\n    _scheduler.add_job(\n        _run_cmd,\n        IntervalTrigger(seconds=seconds),\n        id=job_id,\n        args=[cmd],\n        replace_existing=True,\n    )\n\n\ndef remove(job_id: str) -> None:\n    \"\"\"Remove a job from the scheduler.\"\"\"\n    _scheduler.remove_job(job_id)\n\n\ndef list_jobs() -> List[str]:\n    \"\"\"List all scheduled jobs.\"\"\"\n    return [f\"{j.id}: {j.trigger}\" for j in _scheduler.get_jobs()]\n\n\ndef _run_cmd(cmd: str) -> None:\n    \"\"\"Execute a command string.\"\"\"\n    import subprocess\n    subprocess.run(cmd, shell=True, check=True)\n\n\ndef run() -> None:\n    \"\"\"Run the scheduler (blocking).\"\"\"\n    _scheduler.print_jobs()\n    try:\n        _scheduler.start()\n        while True:\n            import time\n            time.sleep(1)\n    except (KeyboardInterrupt, SystemExit):\n        _scheduler.shutdown() "
        }
    ]
}