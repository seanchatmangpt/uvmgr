{
    "sourceFile": "src/uvmgr/ops/ai.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748236133208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748236133208,
            "name": "Commit-0",
            "content": "\"\"\"\nuvmgr.ops.ai â€“ orchestration wrapper around runtime.ai.\nReturns JSON-safe data for the CLI layer.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import List\n\nfrom uvmgr.core.fs import safe_write\nfrom uvmgr.core.shell import timed\nfrom uvmgr.runtime import ai as _rt\n\n\n@timed\ndef ask(model: str, prompt: str) -> str:\n    return _rt.ask(model, prompt)\n\n\n@timed\ndef plan(model: str, topic: str, outfile: Path | None = None) -> str:\n    steps = _rt.outline(model, topic)\n    md = \"# \" + topic + \"\\n\\n\" + \"\\n\".join(f\"- {s}\" for s in steps) + \"\\n\"\n    if outfile:\n        safe_write(outfile, md)\n    return md\n\n\n@timed\ndef fix_tests(model: str, out_patch: Path = Path(\"fix.patch\")) -> str:\n    diff = _rt.fix_tests(model)\n    if diff:\n        safe_write(out_patch, diff)\n    return diff\n"
        }
    ]
}