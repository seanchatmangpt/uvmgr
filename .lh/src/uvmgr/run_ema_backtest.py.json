{
    "sourceFile": "src/uvmgr/run_ema_backtest.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748366527359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748366748790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,9 @@\n async def main():\n     \"\"\"Run the EMA cross strategy backtest with sample data.\"\"\"\n     # First, load data into catalog\n     catalog = await load_data_to_catalog(\n-        data_dir=\"~/Downloads/Data\",\n+        data_dir=\"~/Downloads/Data/HISTDATA_COM_ASCII_EURUSD_T202410\",\n         catalog_path=\"./catalog\",\n         instrument_id=\"EUR/USD\",\n     )\n     \n"
                }
            ],
            "date": 1748366527359,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\n\"\"\"Run a NautilusTrader backtest with EMA cross strategy using the high-level API.\"\"\"\n\nimport asyncio\nimport logging\nimport shutil\nfrom decimal import Decimal\nfrom datetime import datetime\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom nautilus_trader.backtest.node import (\n    BacktestDataConfig,\n    BacktestEngineConfig,\n    BacktestNode,\n    BacktestRunConfig,\n    BacktestVenueConfig,\n)\nfrom nautilus_trader.config import ImportableStrategyConfig, LoggingConfig\nfrom nautilus_trader.core.datetime import dt_to_unix_nanos\nfrom nautilus_trader.model import QuoteTick\nfrom nautilus_trader.persistence.catalog import ParquetDataCatalog\nfrom nautilus_trader.persistence.wranglers import QuoteTickDataWrangler\nfrom nautilus_trader.test_kit.providers import CSVTickDataLoader, TestInstrumentProvider\n\n\nasync def load_data_to_catalog(\n    data_dir: str | Path,\n    catalog_path: str | Path,\n    instrument_id: str = \"EUR/USD\",\n) -> ParquetDataCatalog:\n    \"\"\"\n    Load FX data from CSV files into a Parquet data catalog.\n\n    Args:\n        data_dir: Directory containing the CSV data files\n        catalog_path: Path where the catalog will be created\n        instrument_id: The instrument ID to use\n\n    Returns:\n        The created ParquetDataCatalog instance\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    path = Path(data_dir).expanduser()\n    raw_files = list(path.glob(\"DAT_ASCII_*.csv\"))\n    \n    if not raw_files:\n        raise ValueError(f\"No histdata files found in {path}\")\n\n    # Clear existing catalog if it exists\n    catalog_path = Path(catalog_path)\n    if catalog_path.exists():\n        shutil.rmtree(catalog_path)\n    catalog_path.mkdir(parents=True)\n\n    # Create catalog instance\n    catalog = ParquetDataCatalog(catalog_path)\n    \n    # Create instrument\n    instrument = TestInstrumentProvider.default_fx_ccy(instrument_id)\n    catalog.write_data([instrument])\n    \n    # Process and write each file\n    wrangler = QuoteTickDataWrangler(instrument)\n    total_ticks = 0\n    \n    for file_path in raw_files:\n        logger.info(f\"Processing {file_path.name}\")\n        \n        # Load CSV data\n        df = CSVTickDataLoader.load(\n            file_path=file_path,\n            index_col=0,\n            header=None,\n            names=[\"timestamp\", \"bid_price\", \"ask_price\", \"volume\"],\n            usecols=[\"timestamp\", \"bid_price\", \"ask_price\"],\n            parse_dates=[\"timestamp\"],\n            date_format=\"%Y%m%d %H%M%S%f\",\n        )\n        \n        # Sort by timestamp\n        df = df.sort_index()\n        \n        # Process quotes\n        ticks = wrangler.process(df)\n        catalog.write_data(ticks)\n        total_ticks += len(ticks)\n        \n        logger.info(f\"Loaded {len(ticks)} ticks from {file_path.name}\")\n    \n    logger.info(f\"Total ticks loaded: {total_ticks}\")\n    return catalog\n\n\nasync def run_backtest(\n    catalog_path: str | Path,\n    instrument_id: str = \"EUR/USD\",\n    start_time: datetime | None = None,\n    end_time: datetime | None = None,\n    log_level: str = \"INFO\",\n) -> BacktestNode:\n    \"\"\"\n    Run a backtest with the EMA cross strategy.\n\n    Args:\n        catalog_path: Path to the Parquet data catalog\n        instrument_id: The instrument ID to trade\n        start_time: Optional start time for the backtest\n        end_time: Optional end time for the backtest\n        log_level: Logging level for the backtest\n\n    Returns:\n        The backtest node instance containing the results\n    \"\"\"\n    # Configure logging\n    logging.basicConfig(\n        level=getattr(logging, log_level),\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    )\n    logger = logging.getLogger(__name__)\n\n    try:\n        # Load catalog\n        catalog = ParquetDataCatalog(catalog_path)\n        instruments = catalog.instruments()\n        \n        if not instruments:\n            raise ValueError(\"No instruments found in catalog\")\n\n        # Find the requested instrument\n        instrument = next((i for i in instruments if str(i.id) == f\"{instrument_id}.SIM\"), None)\n        if not instrument:\n            raise ValueError(f\"Instrument {instrument_id} not found in catalog\")\n\n        # Convert times to nanos if provided\n        start_nanos = dt_to_unix_nanos(pd.Timestamp(start_time, tz=\"UTC\")) if start_time else None\n        end_nanos = dt_to_unix_nanos(pd.Timestamp(end_time, tz=\"UTC\")) if end_time else None\n\n        # Configure venue\n        venue_config = BacktestVenueConfig(\n            name=\"SIM\",\n            oms_type=\"HEDGING\",\n            account_type=\"MARGIN\",\n            base_currency=\"USD\",\n            starting_balances=[\"1_000_000 USD\"],\n        )\n\n        # Configure data\n        data_config = BacktestDataConfig(\n            catalog_path=str(catalog.path),\n            data_cls=QuoteTick,\n            instrument_id=instrument.id,\n            start_time=start_nanos,\n            end_time=end_nanos,\n        )\n\n        # Configure strategy\n        strategy_config = ImportableStrategyConfig(\n            strategy_path=\"nautilus_trader.examples.strategies.ema_cross:EMACross\",\n            config_path=\"nautilus_trader.examples.strategies.ema_cross:EMACrossConfig\",\n            config={\n                \"instrument_id\": instrument.id,\n                \"bar_type\": f\"{instrument_id}.SIM-15-MINUTE-BID-INTERNAL\",\n                \"fast_ema_period\": 10,\n                \"slow_ema_period\": 20,\n                \"trade_size\": Decimal(1_000_000),\n            },\n        )\n\n        # Configure engine\n        engine_config = BacktestEngineConfig(\n            strategies=[strategy_config],\n            logging=LoggingConfig(log_level=log_level),\n        )\n\n        # Configure and run backtest\n        config = BacktestRunConfig(\n            engine=engine_config,\n            venues=[venue_config],\n            data=[data_config],\n        )\n\n        node = BacktestNode(configs=[config])\n        results = node.run()\n\n        if not results:\n            raise RuntimeError(\"Backtest produced no results\")\n\n        # Get the engine for analysis\n        engine = node.get_engine(config.id)\n        \n        # Generate reports\n        logger.info(\"\\nOrder Fills Report:\")\n        logger.info(engine.trader.generate_order_fills_report())\n        \n        logger.info(\"\\nPositions Report:\")\n        logger.info(engine.trader.generate_positions_report())\n        \n        logger.info(\"\\nAccount Report:\")\n        logger.info(engine.trader.generate_account_report(venue_config.name))\n\n        return node\n\n    except Exception as e:\n        logger.error(f\"Error running backtest: {e}\", exc_info=True)\n        raise\n\n\nasync def main():\n    \"\"\"Run the EMA cross strategy backtest with sample data.\"\"\"\n    # First, load data into catalog\n    catalog = await load_data_to_catalog(\n        data_dir=\"~/Downloads/Data\",\n        catalog_path=\"./catalog\",\n        instrument_id=\"EUR/USD\",\n    )\n    \n    # Then run the backtest\n    await run_backtest(\n        catalog_path=\"./catalog\",\n        instrument_id=\"EUR/USD\",\n        start_time=datetime(2024, 10, 1),\n        end_time=datetime(2024, 10, 15),\n        log_level=\"INFO\",\n    )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main()) "
        }
    ]
}