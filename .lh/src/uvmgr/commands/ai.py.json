{
    "sourceFile": "src/uvmgr/commands/ai.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1748236159044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748239789457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+\"\"\"\n+Typer sub-app:  uvmgr ai …\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import pathlib\n+import typer\n+\n+from .. import main as cli_root\n+from uvmgr.core.shell import colour, dump_json\n+from uvmgr.ops import ai as ai_ops\n+\n+ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n+cli_root.app.add_typer(ai_app, name=\"ai\")\n+\n+_DEFAULT_MODEL = \"ollama/llama3:8b\"\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Utilities\n+# --------------------------------------------------------------------------- #\n+def _maybe_json(ctx: typer.Context, payload):\n+    if ctx.meta.get(\"json\"):\n+        dump_json(payload)\n+        raise typer.Exit()\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Verbs\n+# --------------------------------------------------------------------------- #\n+@ai_app.command(\"ask\")\n+def ask(\n+    ctx: typer.Context,\n+    prompt: str = typer.Argument(..., show_default=False),\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+):\n+    reply = ai_ops.ask(model, prompt)\n+    _maybe_json(ctx, {\"reply\": reply})\n+    colour(reply, \"cyan\")\n+\n+\n+@ai_app.command(\"plan\")\n+def plan(\n+    ctx: typer.Context,\n+    topic: str,\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n+):\n+    md = ai_ops.plan(model, topic, out)\n+    _maybe_json(ctx, {\"plan\": md})\n+    colour(md)\n+\n+\n+@ai_app.command(\"fix-tests\")\n+def fix_tests(\n+    ctx: typer.Context,\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n+):\n+    diff = ai_ops.fix_tests(model, patch)\n+    if not diff:\n+        colour(\"✔ tests already pass\", \"green\")\n+    else:\n+        colour(f\"Patch written to {patch}\", \"green\")\n"
                },
                {
                    "date": 1748244940048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n cli_root.app.add_typer(ai_app, name=\"ai\")\n \n-_DEFAULT_MODEL = \"ollama/llama3:8b\"\n+_DEFAULT_MODEL = \"ollama/phi3:medium-128k \"\n \n \n # --------------------------------------------------------------------------- #\n # Utilities\n"
                },
                {
                    "date": 1748244989598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+\"\"\"\n+Typer sub-app:  uvmgr ai …\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import pathlib\n+import typer\n+\n+from .. import main as cli_root\n+from uvmgr.core.shell import colour, dump_json\n+from uvmgr.ops import ai as ai_ops\n+\n+ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n+cli_root.app.add_typer(ai_app, name=\"ai\")\n+\n+_DEFAULT_MODEL = \"ollama/phi3:medium-128k \"\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Utilities\n+# --------------------------------------------------------------------------- #\n+def _maybe_json(ctx: typer.Context, payload):\n+    if ctx.meta.get(\"json\"):\n+        dump_json(payload)\n+        raise typer.Exit()\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Verbs\n+# --------------------------------------------------------------------------- #\n+@ai_app.command(\"ask\")\n+def ask(\n+    ctx: typer.Context,\n+    prompt: str = typer.Argument(..., show_default=False),\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+):\n+    reply = ai_ops.ask(model, prompt)\n+    _maybe_json(ctx, {\"reply\": reply})\n+    colour(reply, \"cyan\")\n+\n+\n+@ai_app.command(\"plan\")\n+def plan(\n+    ctx: typer.Context,\n+    topic: str,\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n+):\n+    md = ai_ops.plan(model, topic, out)\n+    _maybe_json(ctx, {\"plan\": md})\n+    colour(md)\n+\n+\n+@ai_app.command(\"fix-tests\")\n+def fix_tests(\n+    ctx: typer.Context,\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n+):\n+    diff = ai_ops.fix_tests(model, patch)\n+    if not diff:\n+        colour(\"✔ tests already pass\", \"green\")\n+    else:\n+        colour(f\"Patch written to {patch}\", \"green\")\n"
                },
                {
                    "date": 1748245575592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,16 @@\n \n ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n cli_root.app.add_typer(ai_app, name=\"ai\")\n \n-_DEFAULT_MODEL = \"ollama/phi3:medium-128k \"\n+_DEFAULT_MODEL = \"ollama/phi3:medium-128k\"\n \n \n # --------------------------------------------------------------------------- #\n # Utilities\n # --------------------------------------------------------------------------- #\n def _maybe_json(ctx: typer.Context, payload):\n+    print(\"DEBUG ctx.meta:\", ctx.meta)\n     if ctx.meta.get(\"json\"):\n         dump_json(payload)\n         raise typer.Exit()\n \n@@ -62,134 +63,4 @@\n     if not diff:\n         colour(\"✔ tests already pass\", \"green\")\n     else:\n         colour(f\"Patch written to {patch}\", \"green\")\n-\"\"\"\n-Typer sub-app:  uvmgr ai …\n-\"\"\"\n-\n-from __future__ import annotations\n-\n-import pathlib\n-import typer\n-\n-from .. import main as cli_root\n-from uvmgr.core.shell import colour, dump_json\n-from uvmgr.ops import ai as ai_ops\n-\n-ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n-cli_root.app.add_typer(ai_app, name=\"ai\")\n-\n-_DEFAULT_MODEL = \"ollama/phi3:medium-128k \"\n-\n-\n-# --------------------------------------------------------------------------- #\n-# Utilities\n-# --------------------------------------------------------------------------- #\n-def _maybe_json(ctx: typer.Context, payload):\n-    if ctx.meta.get(\"json\"):\n-        dump_json(payload)\n-        raise typer.Exit()\n-\n-\n-# --------------------------------------------------------------------------- #\n-# Verbs\n-# --------------------------------------------------------------------------- #\n-@ai_app.command(\"ask\")\n-def ask(\n-    ctx: typer.Context,\n-    prompt: str = typer.Argument(..., show_default=False),\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-):\n-    reply = ai_ops.ask(model, prompt)\n-    _maybe_json(ctx, {\"reply\": reply})\n-    colour(reply, \"cyan\")\n-\n-\n-@ai_app.command(\"plan\")\n-def plan(\n-    ctx: typer.Context,\n-    topic: str,\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n-):\n-    md = ai_ops.plan(model, topic, out)\n-    _maybe_json(ctx, {\"plan\": md})\n-    colour(md)\n-\n-\n-@ai_app.command(\"fix-tests\")\n-def fix_tests(\n-    ctx: typer.Context,\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n-):\n-    diff = ai_ops.fix_tests(model, patch)\n-    if not diff:\n-        colour(\"✔ tests already pass\", \"green\")\n-    else:\n-        colour(f\"Patch written to {patch}\", \"green\")\n-\"\"\"\n-Typer sub-app:  uvmgr ai …\n-\"\"\"\n-\n-from __future__ import annotations\n-\n-import pathlib\n-import typer\n-\n-from ... import main as cli_root\n-from uvmgr.core.shell import colour, dump_json\n-from uvmgr.ops import ai as ai_ops\n-\n-ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n-cli_root.app.add_typer(ai_app, name=\"ai\")\n-\n-_DEFAULT_MODEL = \"ollama/llama3:8b\"\n-\n-\n-# --------------------------------------------------------------------------- #\n-# Utilities\n-# --------------------------------------------------------------------------- #\n-def _maybe_json(ctx: typer.Context, payload):\n-    if ctx.meta.get(\"json\"):\n-        dump_json(payload)\n-        raise typer.Exit()\n-\n-\n-# --------------------------------------------------------------------------- #\n-# Verbs\n-# --------------------------------------------------------------------------- #\n-@ai_app.command(\"ask\")\n-def ask(\n-    ctx: typer.Context,\n-    prompt: str = typer.Argument(..., show_default=False),\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-):\n-    reply = ai_ops.ask(model, prompt)\n-    _maybe_json(ctx, {\"reply\": reply})\n-    colour(reply, \"cyan\")\n-\n-\n-@ai_app.command(\"plan\")\n-def plan(\n-    ctx: typer.Context,\n-    topic: str,\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n-):\n-    md = ai_ops.plan(model, topic, out)\n-    _maybe_json(ctx, {\"plan\": md})\n-    colour(md)\n-\n-\n-@ai_app.command(\"fix-tests\")\n-def fix_tests(\n-    ctx: typer.Context,\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n-):\n-    diff = ai_ops.fix_tests(model, patch)\n-    if not diff:\n-        colour(\"✔ tests already pass\", \"green\")\n-    else:\n-        colour(f\"Patch written to {patch}\", \"green\")\n"
                },
                {
                    "date": 1748245836447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from __future__ import annotations\n \n import pathlib\n import typer\n+import rich.markdown as rmd\n \n from .. import main as cli_root\n from uvmgr.core.shell import colour, dump_json\n from uvmgr.ops import ai as ai_ops\n@@ -20,9 +21,8 @@\n # --------------------------------------------------------------------------- #\n # Utilities\n # --------------------------------------------------------------------------- #\n def _maybe_json(ctx: typer.Context, payload):\n-    print(\"DEBUG ctx.meta:\", ctx.meta)\n     if ctx.meta.get(\"json\"):\n         dump_json(payload)\n         raise typer.Exit()\n \n@@ -49,9 +49,9 @@\n     out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n ):\n     md = ai_ops.plan(model, topic, out)\n     _maybe_json(ctx, {\"plan\": md})\n-    colour(md)\n+    rmd.print(md)\n \n \n @ai_app.command(\"fix-tests\")\n def fix_tests(\n"
                },
                {
                    "date": 1748245865280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+\"\"\"\n+Typer sub-app:  uvmgr ai …\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import pathlib\n+import typer\n+import rich.markdown as rmd\n+\n+from .. import main as cli_root\n+from uvmgr.core.shell import colour, dump_json\n+from uvmgr.ops import ai as ai_ops\n+\n+ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n+cli_root.app.add_typer(ai_app, name=\"ai\")\n+\n+_DEFAULT_MODEL = \"ollama/phi3:medium-128k\"\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Utilities\n+# --------------------------------------------------------------------------- #\n+def _maybe_json(ctx: typer.Context, payload):\n+    if ctx.meta.get(\"json\"):\n+        dump_json(payload)\n+        raise typer.Exit()\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Verbs\n+# --------------------------------------------------------------------------- #\n+@ai_app.command(\"ask\")\n+def ask(\n+    ctx: typer.Context,\n+    prompt: str = typer.Argument(..., show_default=False),\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+):\n+    reply = ai_ops.ask(model, prompt)\n+    _maybe_json(ctx, {\"reply\": reply})\n+    colour(reply, \"cyan\")\n+\n+\n+@ai_app.command(\"plan\")\n+def plan(\n+    ctx: typer.Context,\n+    topic: str,\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n+):\n+    md = ai_ops.plan(model, topic, out)\n+    _maybe_json(ctx, {\"plan\": md})\n+    rmd.print(md)\n+\n+\n+@ai_app.command(\"fix-tests\")\n+def fix_tests(\n+    ctx: typer.Context,\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n+):\n+    diff = ai_ops.fix_tests(model, patch)\n+    if not diff:\n+        colour(\"✔ tests already pass\", \"green\")\n+    else:\n+        colour(f\"Patch written to {patch}\", \"green\")\n"
                },
                {
                    "date": 1748246051830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n ):\n     md = ai_ops.plan(model, topic, out)\n     _maybe_json(ctx, {\"plan\": md})\n-    rmd.print(md)\n+    markdown\n \n \n @ai_app.command(\"fix-tests\")\n def fix_tests(\n"
                },
                {
                    "date": 1748246059957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+\"\"\"\n+Typer sub-app:  uvmgr ai …\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import pathlib\n+import typer\n+import rich.markdown as rmd\n+\n+from .. import main as cli_root\n+from uvmgr.core.shell import colour, dump_json\n+from uvmgr.ops import ai as ai_ops\n+\n+ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n+cli_root.app.add_typer(ai_app, name=\"ai\")\n+\n+_DEFAULT_MODEL = \"ollama/phi3:medium-128k\"\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Utilities\n+# --------------------------------------------------------------------------- #\n+def _maybe_json(ctx: typer.Context, payload):\n+    if ctx.meta.get(\"json\"):\n+        dump_json(payload)\n+        raise typer.Exit()\n+\n+\n+# --------------------------------------------------------------------------- #\n+# Verbs\n+# --------------------------------------------------------------------------- #\n+@ai_app.command(\"ask\")\n+def ask(\n+    ctx: typer.Context,\n+    prompt: str = typer.Argument(..., show_default=False),\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+):\n+    reply = ai_ops.ask(model, prompt)\n+    _maybe_json(ctx, {\"reply\": reply})\n+    colour(reply, \"cyan\")\n+\n+\n+@ai_app.command(\"plan\")\n+def plan(\n+    ctx: typer.Context,\n+    topic: str,\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n+):\n+    md = ai_ops.plan(model, topic, out)\n+    _maybe_json(ctx, {\"plan\": md})\n+    markdown\n+\n+\n+@ai_app.command(\"fix-tests\")\n+def fix_tests(\n+    ctx: typer.Context,\n+    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n+    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n+):\n+    diff = ai_ops.fix_tests(model, patch)\n+    if not diff:\n+        colour(\"✔ tests already pass\", \"green\")\n+    else:\n+        colour(f\"Patch written to {patch}\", \"green\")\n"
                },
                {
                    "date": 1748246068104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n from __future__ import annotations\n \n import pathlib\n import typer\n-import rich.markdown as rmd\n \n from .. import main as cli_root\n from uvmgr.core.shell import colour, dump_json\n from uvmgr.ops import ai as ai_ops\n"
                },
                {
                    "date": 1748246075610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import pathlib\n import typer\n \n from .. import main as cli_root\n-from uvmgr.core.shell import colour, dump_json\n+from uvmgr.core.shell import colour, dump_json, markdown\n from uvmgr.ops import ai as ai_ops\n \n ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n cli_root.app.add_typer(ai_app, name=\"ai\")\n@@ -48,9 +48,9 @@\n     out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n ):\n     md = ai_ops.plan(model, topic, out)\n     _maybe_json(ctx, {\"plan\": md})\n-    markdown\n+    markdown(md)\n \n \n @ai_app.command(\"fix-tests\")\n def fix_tests(\n@@ -62,136 +62,4 @@\n     if not diff:\n         colour(\"✔ tests already pass\", \"green\")\n     else:\n         colour(f\"Patch written to {patch}\", \"green\")\n-\"\"\"\n-Typer sub-app:  uvmgr ai …\n-\"\"\"\n-\n-from __future__ import annotations\n-\n-import pathlib\n-import typer\n-import rich.markdown as rmd\n-\n-from .. import main as cli_root\n-from uvmgr.core.shell import colour, dump_json\n-from uvmgr.ops import ai as ai_ops\n-\n-ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n-cli_root.app.add_typer(ai_app, name=\"ai\")\n-\n-_DEFAULT_MODEL = \"ollama/phi3:medium-128k\"\n-\n-\n-# --------------------------------------------------------------------------- #\n-# Utilities\n-# --------------------------------------------------------------------------- #\n-def _maybe_json(ctx: typer.Context, payload):\n-    if ctx.meta.get(\"json\"):\n-        dump_json(payload)\n-        raise typer.Exit()\n-\n-\n-# --------------------------------------------------------------------------- #\n-# Verbs\n-# --------------------------------------------------------------------------- #\n-@ai_app.command(\"ask\")\n-def ask(\n-    ctx: typer.Context,\n-    prompt: str = typer.Argument(..., show_default=False),\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-):\n-    reply = ai_ops.ask(model, prompt)\n-    _maybe_json(ctx, {\"reply\": reply})\n-    colour(reply, \"cyan\")\n-\n-\n-@ai_app.command(\"plan\")\n-def plan(\n-    ctx: typer.Context,\n-    topic: str,\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n-):\n-    md = ai_ops.plan(model, topic, out)\n-    _maybe_json(ctx, {\"plan\": md})\n-    markdown\n-\n-\n-@ai_app.command(\"fix-tests\")\n-def fix_tests(\n-    ctx: typer.Context,\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n-):\n-    diff = ai_ops.fix_tests(model, patch)\n-    if not diff:\n-        colour(\"✔ tests already pass\", \"green\")\n-    else:\n-        colour(f\"Patch written to {patch}\", \"green\")\n-\"\"\"\n-Typer sub-app:  uvmgr ai …\n-\"\"\"\n-\n-from __future__ import annotations\n-\n-import pathlib\n-import typer\n-import rich.markdown as rmd\n-\n-from .. import main as cli_root\n-from uvmgr.core.shell import colour, dump_json\n-from uvmgr.ops import ai as ai_ops\n-\n-ai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\n-cli_root.app.add_typer(ai_app, name=\"ai\")\n-\n-_DEFAULT_MODEL = \"ollama/phi3:medium-128k\"\n-\n-\n-# --------------------------------------------------------------------------- #\n-# Utilities\n-# --------------------------------------------------------------------------- #\n-def _maybe_json(ctx: typer.Context, payload):\n-    if ctx.meta.get(\"json\"):\n-        dump_json(payload)\n-        raise typer.Exit()\n-\n-\n-# --------------------------------------------------------------------------- #\n-# Verbs\n-# --------------------------------------------------------------------------- #\n-@ai_app.command(\"ask\")\n-def ask(\n-    ctx: typer.Context,\n-    prompt: str = typer.Argument(..., show_default=False),\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-):\n-    reply = ai_ops.ask(model, prompt)\n-    _maybe_json(ctx, {\"reply\": reply})\n-    colour(reply, \"cyan\")\n-\n-\n-@ai_app.command(\"plan\")\n-def plan(\n-    ctx: typer.Context,\n-    topic: str,\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n-):\n-    md = ai_ops.plan(model, topic, out)\n-    _maybe_json(ctx, {\"plan\": md})\n-    rmd.print(md)\n-\n-\n-@ai_app.command(\"fix-tests\")\n-def fix_tests(\n-    ctx: typer.Context,\n-    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n-    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n-):\n-    diff = ai_ops.fix_tests(model, patch)\n-    if not diff:\n-        colour(\"✔ tests already pass\", \"green\")\n-    else:\n-        colour(f\"Patch written to {patch}\", \"green\")\n"
                }
            ],
            "date": 1748236159044,
            "name": "Commit-0",
            "content": "\"\"\"\nTyper sub-app:  uvmgr ai …\n\"\"\"\n\nfrom __future__ import annotations\n\nimport pathlib\nimport typer\n\nfrom ... import main as cli_root\nfrom uvmgr.core.shell import colour, dump_json\nfrom uvmgr.ops import ai as ai_ops\n\nai_app = typer.Typer(help=\"Local or remote Language-Model helpers\")\ncli_root.app.add_typer(ai_app, name=\"ai\")\n\n_DEFAULT_MODEL = \"ollama/llama3:8b\"\n\n\n# --------------------------------------------------------------------------- #\n# Utilities\n# --------------------------------------------------------------------------- #\ndef _maybe_json(ctx: typer.Context, payload):\n    if ctx.meta.get(\"json\"):\n        dump_json(payload)\n        raise typer.Exit()\n\n\n# --------------------------------------------------------------------------- #\n# Verbs\n# --------------------------------------------------------------------------- #\n@ai_app.command(\"ask\")\ndef ask(\n    ctx: typer.Context,\n    prompt: str = typer.Argument(..., show_default=False),\n    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n):\n    reply = ai_ops.ask(model, prompt)\n    _maybe_json(ctx, {\"reply\": reply})\n    colour(reply, \"cyan\")\n\n\n@ai_app.command(\"plan\")\ndef plan(\n    ctx: typer.Context,\n    topic: str,\n    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n    out: pathlib.Path | None = typer.Option(None, \"--out\", \"-o\", dir_okay=False),\n):\n    md = ai_ops.plan(model, topic, out)\n    _maybe_json(ctx, {\"plan\": md})\n    colour(md)\n\n\n@ai_app.command(\"fix-tests\")\ndef fix_tests(\n    ctx: typer.Context,\n    model: str = typer.Option(_DEFAULT_MODEL, \"--model\", \"-m\"),\n    patch: pathlib.Path = typer.Option(\"fix.patch\", \"--patch\", \"-p\"),\n):\n    diff = ai_ops.fix_tests(model, patch)\n    if not diff:\n        colour(\"✔ tests already pass\", \"green\")\n    else:\n        colour(f\"Patch written to {patch}\", \"green\")\n"
        }
    ]
}