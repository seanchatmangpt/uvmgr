# #
# Auto-generated semantic convention constants for uvmgr.
# Generated from /Users/sac/dev/uvmgr/weaver-forge/registry
#
# DO NOT EDIT - this file is auto-generated by Weaver Forge.

"""
Semantic Convention Constants for uvmgr
==================================================

This module contains auto-generated semantic convention constants that provide
type-safe access to OpenTelemetry semantic convention attributes.

Generated on: 2025-06-27T22:54:03.624267
Weaver version: weaver 0.15.3
Registry: /Users/sac/dev/uvmgr/weaver-forge/registry
"""

from typing import Final


# CLI command attributes for uvmgr
class CliAttributes:
    """CLI command attributes for uvmgr"""
    
    CLI_COMMAND: Final[str] = "cli.command"  # The primary CLI command being executed
    
    CLI_SUBCOMMAND: Final[str] = "cli.subcommand"  # The subcommand if applicable
    
    CLI_EXIT_CODE: Final[str] = "cli.exit_code"  # The exit code of the CLI command
    
    COMMAND: Final[str] = "cli.command"  # Alias for CLI_COMMAND (compatibility)
    
    OPTIONS: Final[str] = "cli.options"  # CLI options and arguments
    
    EXIT_CODE: Final[str] = "cli.exit_code"  # Alias for CLI_EXIT_CODE (compatibility)
    


# Package management operation attributes
class PackageAttributes:
    """Package management operation attributes"""
    
    PACKAGE_NAME: Final[str] = "package.name"  # Name of the package being operated on
    
    PACKAGE_VERSION: Final[str] = "package.version"  # Version specification or resolved version
    
    PACKAGE_OPERATION: Final[str] = "package.operation"  # The type of package operation
    
    OPERATION: Final[str] = "package.operation"  # Alias for PACKAGE_OPERATION
    
    DEV_DEPENDENCY: Final[str] = "package.dev_dependency"  # Whether it's a dev dependency


# Security operation attributes
class SecurityAttributes:
    """Security operation attributes"""
    
    OPERATION: Final[str] = "security.operation"  # The type of security operation
    
    PROJECT_PATH: Final[str] = "security.project_path"  # Path being scanned
    
    SEVERITY_THRESHOLD: Final[str] = "security.severity_threshold"  # Minimum severity level
    
    SCAN_TYPE: Final[str] = "security.scan_type"  # Type of security scan
    
    VULNERABILITY_COUNT: Final[str] = "security.vulnerability_count"  # Number of vulnerabilities found
    
    ISSUES_FOUND: Final[str] = "security.issues_found"  # Total security issues detected
    
    SCAN_DURATION: Final[str] = "security.scan_duration"  # Time taken for security scan


# Security operation values
class SecurityOperations:
    """Standard security operation values"""
    
    SCAN: Final[str] = "scan"  # Comprehensive security scan
    
    AUDIT: Final[str] = "audit"  # Dependency vulnerability audit
    
    SECRETS: Final[str] = "secrets"  # Secret detection scan
    
    CODE: Final[str] = "code"  # Code security analysis
    
    CONFIG: Final[str] = "config"  # Security configuration review
    
    FIX: Final[str] = "fix"  # Vulnerability remediation
    
    DEV_DEPENDENCY: Final[str] = "package.dev_dependency"  # Whether it's a dev dependency
    





# Git worktree operation attributes
class WorktreeAttributes:
    """Git worktree operation attributes"""
    
    OPERATION: Final[str] = "worktree.operation"  # The type of worktree operation
    
    BRANCH: Final[str] = "worktree.branch"  # Git branch for the worktree
    
    PATH: Final[str] = "worktree.path"  # Path to the worktree
    
    PROJECT_PATH: Final[str] = "worktree.project_path"  # Path to external project
    
    ISOLATED: Final[str] = "worktree.isolated"  # Whether the worktree is isolated
    
    ENVIRONMENT: Final[str] = "worktree.environment"  # Associated virtual environment
    
    TRACK_REMOTE: Final[str] = "worktree.track_remote"  # Whether to track remote branch


# Git worktree operation values
class WorktreeOperations:
    """Standard worktree operation values"""
    
    CREATE: Final[str] = "create"  # Create new worktree
    
    LIST: Final[str] = "list"  # List existing worktrees
    
    REMOVE: Final[str] = "remove"  # Remove worktree
    
    SWITCH: Final[str] = "switch"  # Switch to different worktree
    
    ISOLATE: Final[str] = "isolate"  # Create isolated environment
    
    CLEANUP: Final[str] = "cleanup"  # Clean up unused worktrees
    
    STATUS: Final[str] = "status"  # Get worktree status


# Remote execution operation attributes
class RemoteAttributes:
    """Remote execution operation attributes"""
    
    HOST: Final[str] = "remote.host"  # Remote host identifier
    
    OPERATION: Final[str] = "remote.operation"  # The type of remote operation
    
    USER: Final[str] = "remote.user"  # SSH username
    
    PORT: Final[str] = "remote.port"  # SSH port
    
    COMMAND: Final[str] = "remote.command"  # Command being executed


# Remote execution operation values
class RemoteOperations:
    """Standard remote operation values"""
    
    EXECUTE_COMMAND: Final[str] = "execute_command"  # Execute command on remote host
    
    COPY_FILE: Final[str] = "copy_file"  # Copy file to remote host
    
    LIST_HOSTS: Final[str] = "list_hosts"  # List configured hosts


# Agent Guide operation attributes
class GuideAttributes:
    """Agent guide catalog attributes"""
    
    OPERATION: Final[str] = "guide.operation"  # The type of guide operation
    
    NAME: Final[str] = "guide.name"  # Name of the guide
    
    VERSION: Final[str] = "guide.version"  # Guide version
    
    CATEGORY: Final[str] = "guide.category"  # Guide category
    
    SOURCE: Final[str] = "guide.source"  # Guide source repository
    
    CACHED: Final[str] = "guide.cached"  # Whether guide is cached
    
    SIZE: Final[str] = "guide.size"  # Guide size in bytes


# Agent Guide operation values
class GuideOperations:
    """Standard guide operation values"""
    
    CATALOG: Final[str] = "catalog"  # Browse guide catalog
    
    FETCH: Final[str] = "fetch"  # Fetch/download guide
    
    LIST: Final[str] = "list"  # List cached guides
    
    UPDATE: Final[str] = "update"  # Update guides
    
    VALIDATE: Final[str] = "validate"  # Validate guide structure
    
    PIN: Final[str] = "pin"  # Pin guide version
    
    CACHE: Final[str] = "cache"  # Cache management


# Information Design operation attributes
class InfoDesignAttributes:
    """Information design operation attributes with DSPy"""
    
    OPERATION: Final[str] = "infodesign.operation"  # The type of information design operation
    
    SOURCE: Final[str] = "infodesign.source"  # Source content path
    
    ANALYSIS_TYPE: Final[str] = "infodesign.analysis_type"  # Type of analysis
    
    DOC_TYPE: Final[str] = "infodesign.doc_type"  # Documentation type
    
    PATTERN: Final[str] = "infodesign.pattern"  # Design pattern applied
    
    OUTPUT_FORMAT: Final[str] = "infodesign.output_format"  # Output format
    
    TEMPLATE: Final[str] = "infodesign.template"  # Template used
    
    ENTITIES_COUNT: Final[str] = "infodesign.entities_count"  # Number of entities found
    
    RELATIONSHIPS_COUNT: Final[str] = "infodesign.relationships_count"  # Number of relationships
    
    COMPLEXITY_SCORE: Final[str] = "infodesign.complexity_score"  # Complexity score
    
    GRAPH_TYPE: Final[str] = "infodesign.graph_type"  # Knowledge graph type
    
    EXTRACT_TYPE: Final[str] = "infodesign.extract_type"  # Knowledge extraction type
    
    MODEL: Final[str] = "infodesign.model"  # AI model used
    
    CONFIDENCE_THRESHOLD: Final[str] = "infodesign.confidence_threshold"  # Confidence threshold
    
    DSPY_ENABLED: Final[str] = "infodesign.dspy_enabled"  # Whether DSPy is enabled


# Information Design operation values
class InfoDesignOperations:
    """Standard information design operation values"""
    
    ANALYZE: Final[str] = "analyze"  # Analyze information structure
    
    GENERATE: Final[str] = "generate"  # Generate documentation
    
    OPTIMIZE: Final[str] = "optimize"  # Optimize information architecture
    
    EXTRACT: Final[str] = "extract"  # Extract knowledge
    
    GRAPH: Final[str] = "graph"  # Create knowledge graph
    
    TEMPLATE: Final[str] = "template"  # Manage templates


# Validation helpers
def validate_attribute(attribute_name: str, attribute_value: str) -> bool:
    """Validate that an attribute name and value are valid semantic conventions."""
    # Dynamically collect all attribute constants from all classes
    valid_attributes = set()
    
    # Get all attribute classes
    attribute_classes = [
        CliAttributes, PackageAttributes, SecurityAttributes, WorktreeAttributes,
        RemoteAttributes, GuideAttributes, InfoDesignAttributes, ProcessAttributes,
        TestAttributes, ToolAttributes, PluginAttributes, BuildAttributes,
        ProjectAttributes, AIAttributes, CIAttributes, WorkflowAttributes,
        ReleaseAttributes, UvxAttributes, CacheAttributes, IndexAttributes,
        SearchAttributes, ServerAttributes, ShellAttributes, McpAttributes,
        GitHubAttributes, MultiLangAttributes, PerformanceAttributes,
        ContainerAttributes, CiCdAttributes, AgentAttributes, InfrastructureAttributes
    ]
    
    # Collect all Final string attributes from each class
    for attr_class in attribute_classes:
        for attr_name in dir(attr_class):
            if not attr_name.startswith('_'):  # Skip private/magic methods
                attr_value = getattr(attr_class, attr_name)
                if isinstance(attr_value, str):
                    valid_attributes.add(attr_value)
    
    return attribute_name in valid_attributes

# Process execution attributes
class ProcessAttributes:
    """Process execution attributes"""
    
    COMMAND: Final[str] = "process.command"  # Command being executed
    
    EXECUTABLE: Final[str] = "process.executable"  # Executable name
    
    EXIT_CODE: Final[str] = "process.exit_code"  # Process exit code
    
    WORKING_DIRECTORY: Final[str] = "process.working_directory"  # Working directory
    
    DURATION: Final[str] = "process.duration"  # Process execution duration


# Test execution attributes  
class TestAttributes:
    """Test execution attributes"""
    
    OPERATION: Final[str] = "test.operation"  # Test operation type
    
    FRAMEWORK: Final[str] = "test.framework"  # Testing framework
    
    TEST_COUNT: Final[str] = "test.count"  # Number of tests
    
    PASSED: Final[str] = "test.passed"  # Number of tests passed
    
    FAILED: Final[str] = "test.failed"  # Number of tests failed
    
    SKIPPED: Final[str] = "test.skipped"  # Number of tests skipped


# Tool integration attributes
class ToolAttributes:
    """Tool integration attributes"""
    
    TOOL_NAME: Final[str] = "tool.name"  # Name of the integrated tool
    
    TOOL_CATEGORY: Final[str] = "tool.category"  # Category of the tool
    
    TOOL_VERSION: Final[str] = "tool.version"  # Version of the tool
    
    TOOL_STATUS: Final[str] = "tool.status"  # Status of the tool (available, not_found, etc.)
    
    OPERATION: Final[str] = "tool.operation"  # Operation being performed with the tool
    
    INTEGRATION_ENGINE: Final[str] = "tool.integration_engine"  # Tool integration engine name
    
    CAPABILITIES: Final[str] = "tool.capabilities"  # Tool capabilities


# Tool operation types
class ToolOperations:
    """Tool operation types"""
    
    DISCOVER: Final[str] = "discover"  # Tool discovery operation
    
    EXECUTE: Final[str] = "execute"  # Tool execution operation
    
    HEALTH_CHECK: Final[str] = "health_check"  # Tool health check operation
    
    ROUTE: Final[str] = "route"  # Tool routing operation


# Test coverage attributes (continuation of TestAttributes)  
class TestCoverageAttributes:
    """Test coverage attributes"""
    
    COVERAGE_PERCENTAGE: Final[str] = "test.coverage_percentage"  # Test coverage percentage


# Plugin system attributes
class PluginAttributes:
    """Plugin system attributes"""
    
    PLUGIN_NAME: Final[str] = "plugin.name"  # Name of the plugin
    
    PLUGIN_VERSION: Final[str] = "plugin.version"  # Version of the plugin
    
    PLUGIN_TYPE: Final[str] = "plugin.type"  # Type of plugin (command, tool_adapter, etc.)
    
    PLUGIN_STATUS: Final[str] = "plugin.status"  # Status of the plugin
    
    PLUGIN_SYSTEM: Final[str] = "plugin.system"  # Plugin system name
    
    HOOK_TYPE: Final[str] = "plugin.hook_type"  # Type of hook being executed
    
    MARKETPLACE_SOURCE: Final[str] = "plugin.marketplace_source"  # Source of plugin


# Plugin operation types
class PluginOperations:
    """Plugin operation types"""
    
    DISCOVER: Final[str] = "discover"  # Plugin discovery operation
    
    LOAD: Final[str] = "load"  # Plugin load operation
    
    UNLOAD: Final[str] = "unload"  # Plugin unload operation
    
    INSTALL: Final[str] = "install"  # Plugin install operation
    
    UNINSTALL: Final[str] = "uninstall"  # Plugin uninstall operation
    
    EXECUTE_HOOK: Final[str] = "execute_hook"  # Hook execution operation


# Build operation attributes
class BuildAttributes:
    """Build operation attributes"""
    
    OPERATION: Final[str] = "build.operation"  # Build operation type
    
    TYPE: Final[str] = "build.type"  # Build type (wheel, exe, etc.)
    
    OUTPUT_PATH: Final[str] = "build.output_path"  # Output path
    
    SIZE: Final[str] = "build.size"  # Build artifact size


# Project creation attributes
class ProjectAttributes:
    """Project creation attributes"""
    
    NAME: Final[str] = "project.name"  # Project name
    
    LANGUAGE: Final[str] = "project.language"  # Programming language
    
    OPERATION: Final[str] = "project.operation"  # Project operation type


# Project operations
class ProjectOperations:
    """Standard project operation values"""
    
    CREATE: Final[str] = "create"


# AI operation attributes
class AIAttributes:
    """AI operation attributes"""
    
    OPERATION: Final[str] = "ai.operation"  # AI operation type
    
    MODEL: Final[str] = "ai.model"  # AI model name
    
    PROVIDER: Final[str] = "ai.provider"  # AI provider
    
    TOKENS_INPUT: Final[str] = "ai.tokens.input"  # Input tokens
    
    TOKENS_OUTPUT: Final[str] = "ai.tokens.output"  # Output tokens
    
    COST: Final[str] = "ai.cost"  # Operation cost


# CI operation attributes
class CIAttributes:
    """CI operation attributes"""
    
    OPERATION: Final[str] = "ci.operation"  # CI operation type
    
    RUNNER: Final[str] = "ci.runner"  # CI runner type
    
    ENVIRONMENT: Final[str] = "ci.environment"  # Environment type
    
    TEST_COUNT: Final[str] = "ci.test_count"  # Number of tests
    
    PASSED: Final[str] = "ci.passed"  # Number passed
    
    FAILED: Final[str] = "ci.failed"  # Number failed
    
    DURATION: Final[str] = "ci.duration"  # Duration in seconds
    
    SUCCESS_RATE: Final[str] = "ci.success_rate"  # Success rate percentage


# CI operations
class CIOperations:
    """Standard CI operation values"""
    
    VERIFY: Final[str] = "verify"
    
    QUICK_TEST: Final[str] = "quick_test"
    
    RUN: Final[str] = "run"


# Workflow attributes
class WorkflowAttributes:
    """Workflow execution attributes"""
    
    OPERATION: Final[str] = "workflow.operation"  # Workflow operation type
    
    TYPE: Final[str] = "workflow.type"  # Workflow type (bpmn, etc.)
    
    DEFINITION_PATH: Final[str] = "workflow.definition_path"  # Path to workflow definition
    
    DEFINITION_NAME: Final[str] = "workflow.definition_name"  # Workflow name
    
    ENGINE: Final[str] = "workflow.engine"  # Workflow engine


# Workflow operations
class WorkflowOperations:
    """Standard workflow operation values"""
    
    RUN: Final[str] = "run"
    
    VALIDATE: Final[str] = "validate"
    
    PARSE: Final[str] = "parse"


# Package operations
class PackageOperations:
    """Standard package operation values"""
    
    ADD: Final[str] = "add"
    
    REMOVE: Final[str] = "remove"
    
    UPDATE: Final[str] = "update"
    
    LIST: Final[str] = "list"
    
    SYNC: Final[str] = "sync"


# Release operation attributes
class ReleaseAttributes:
    """Release operation attributes"""
    
    VERSION: Final[str] = "release.version"  # Release version
    
    TYPE: Final[str] = "release.type"  # Release type (major, minor, patch)
    
    OPERATION: Final[str] = "release.operation"  # Release operation type


# Release operations
class ReleaseOperations:
    """Standard release operation values"""
    
    BUMP: Final[str] = "bump"
    
    CHANGELOG: Final[str] = "changelog"
    
    TAG: Final[str] = "tag"


# Tool management attributes
class ToolAttributes:
    """Tool management attributes"""
    
    TOOL_NAME: Final[str] = "tool.name"  # Name of the tool
    
    OPERATION: Final[str] = "tool.operation"  # Tool operation type
    
    ISOLATED: Final[str] = "tool.isolated"  # Whether tool runs in isolated environment
    
    PACKAGE_COUNT: Final[str] = "tool.package_count"  # Number of packages
    
    CATEGORY: Final[str] = "tool.category"  # Tool category
    
    RECOMMENDATION_COUNT: Final[str] = "tool.recommendation_count"  # Number of recommendations
    
    HEALTH_STATUS: Final[str] = "tool.health_status"  # Health status
    
    PROFILE: Final[str] = "tool.profile"  # Tool profile name


# Tool operations
class ToolOperations:
    """Standard tool operation values"""
    
    INSTALL: Final[str] = "install"
    
    RUN: Final[str] = "run"
    
    UNINSTALL: Final[str] = "uninstall"
    
    LIST: Final[str] = "list"
    
    DIRECTORY: Final[str] = "directory"
    
    RECOMMEND: Final[str] = "recommend"
    
    HEALTH_CHECK: Final[str] = "health_check"
    
    SYNC: Final[str] = "sync"


# uvx-specific attributes
class UvxAttributes:
    """uvx-specific attributes for isolated tool management"""
    
    OPERATION: Final[str] = "uvx.operation"  # uvx operation type
    
    PACKAGE: Final[str] = "uvx.package"  # Package name
    
    TOOL: Final[str] = "uvx.tool"  # Tool name
    
    PYTHON_VERSION: Final[str] = "uvx.python_version"  # Python version
    
    FORCE: Final[str] = "uvx.force"  # Force reinstall flag
    
    TOOL_COUNT: Final[str] = "uvx.tool_count"  # Number of tools
    
    CATEGORY: Final[str] = "uvx.category"  # Tool category
    
    RECOMMENDATION_COUNT: Final[str] = "uvx.recommendation_count"  # Recommendations
    
    HEALTH_STATUS: Final[str] = "uvx.health_status"  # Health status


# uvx operations
class UvxOperations:
    """Standard uvx operation values"""
    
    INSTALL: Final[str] = "install"
    
    RUN: Final[str] = "run"
    
    LIST: Final[str] = "list"
    
    UNINSTALL: Final[str] = "uninstall"
    
    UPGRADE: Final[str] = "upgrade"
    
    RECOMMEND: Final[str] = "recommend"
    
    HEALTH_CHECK: Final[str] = "health_check"


# Cache management attributes
class CacheAttributes:
    """Cache management attributes"""
    
    OPERATION: Final[str] = "cache.operation"  # Cache operation type
    
    SIZE: Final[str] = "cache.size"  # Cache size in bytes
    
    TYPE: Final[str] = "cache.type"  # Cache type (global, local, etc.)
    
    PATH: Final[str] = "cache.path"  # Cache directory path
    
    ITEM_COUNT: Final[str] = "cache.item_count"  # Number of cached items


# Cache operations
class CacheOperations:
    """Standard cache operation values"""
    
    CLEAR: Final[str] = "clear"
    
    SIZE: Final[str] = "size"
    
    DIR: Final[str] = "dir"


# Index management attributes
class IndexAttributes:
    """Index management attributes"""
    
    OPERATION: Final[str] = "index.operation"  # Index operation type
    
    URL: Final[str] = "index.url"  # Index URL


# Index operations
class IndexOperations:
    """Standard index operation values"""
    
    ADD: Final[str] = "add"
    
    REMOVE: Final[str] = "remove"
    
    LIST: Final[str] = "list"


# Remote operation attributes
class RemoteAttributes:
    """Remote operation attributes"""
    
    OPERATION: Final[str] = "remote.operation"  # Remote operation type
    
    URL: Final[str] = "remote.url"  # Remote URL
    
    BRANCH: Final[str] = "remote.branch"  # Git branch
    
    COMMIT: Final[str] = "remote.commit"  # Git commit hash


# Remote operations
class RemoteOperations:
    """Standard remote operation values"""
    
    CLONE: Final[str] = "clone"
    
    PULL: Final[str] = "pull"
    
    PUSH: Final[str] = "push"


# Search operation attributes
class SearchAttributes:
    """Search operation attributes"""
    
    OPERATION: Final[str] = "search.operation"  # Search operation type
    
    QUERY: Final[str] = "search.query"  # Search query
    
    PATTERN: Final[str] = "search.pattern"  # Search pattern (alias for query)
    
    RESULTS_COUNT: Final[str] = "search.results_count"  # Number of results
    
    SOURCE: Final[str] = "search.source"  # Search source
    
    FILE_PATTERN: Final[str] = "search.file_pattern"  # File pattern for search
    
    SEARCH_TYPE: Final[str] = "search.type"  # Type of search being performed


# Search operations
class SearchOperations:
    """Standard search operation values"""
    
    PACKAGE: Final[str] = "package"
    
    FILE: Final[str] = "file"
    
    CODE: Final[str] = "code"
    
    DEPS: Final[str] = "deps"
    
    LOGS: Final[str] = "logs"
    
    SEMANTIC_SEARCH: Final[str] = "semantic_search"
    
    ALL: Final[str] = "all"
    
    # Extended search operations for better semantic conventions
    CODE_SEARCH: Final[str] = "code_search"
    
    DEPS_SEARCH: Final[str] = "deps_search"
    
    FILE_SEARCH: Final[str] = "file_search"
    
    LOG_SEARCH: Final[str] = "log_search"
    
    MULTI_SEARCH: Final[str] = "multi_search"


# Server operation attributes
class ServerAttributes:
    """Server operation attributes"""
    
    OPERATION: Final[str] = "server.operation"  # Server operation type
    
    HOST: Final[str] = "server.host"  # Server host
    
    PORT: Final[str] = "server.port"  # Server port
    
    PROTOCOL: Final[str] = "server.protocol"  # Server protocol


# Server operations
class ServerOperations:
    """Standard server operation values"""
    
    START: Final[str] = "start"
    
    STOP: Final[str] = "stop"
    
    RESTART: Final[str] = "restart"


# Shell operation attributes
class ShellAttributes:
    """Shell operation attributes"""
    
    OPERATION: Final[str] = "shell.operation"  # Shell operation type
    
    COMMAND: Final[str] = "shell.command"  # Shell command
    
    WORKING_DIR: Final[str] = "shell.working_dir"  # Working directory
    
    EXIT_CODE: Final[str] = "shell.exit_code"  # Exit code


# Shell operations
class ShellOperations:
    """Standard shell operation values"""
    
    EXECUTE: Final[str] = "execute"
    
    INTERACTIVE: Final[str] = "interactive"
    
    BACKGROUND: Final[str] = "background"


# MCP (Model Context Protocol) attributes
class McpAttributes:
    """MCP operation attributes"""
    
    OPERATION: Final[str] = "mcp.operation"  # MCP operation type
    
    TOOL_NAME: Final[str] = "mcp.tool_name"  # Tool name
    
    RESOURCE_URI: Final[str] = "mcp.resource_uri"  # Resource URI
    
    STATUS: Final[str] = "mcp.status"  # Operation status


# MCP operations
class McpOperations:
    """Standard MCP operation values"""
    
    CALL_TOOL: Final[str] = "call_tool"
    
    LIST_TOOLS: Final[str] = "list_tools"
    
    READ_RESOURCE: Final[str] = "read_resource"
    
    LIST_RESOURCES: Final[str] = "list_resources"


# GitHub-specific attributes
class GitHubAttributes:
    """GitHub-specific semantic convention attributes."""
    OWNER = "github.owner"
    REPOSITORY = "github.repository"
    WORKFLOW_NAME = "github.workflow.name"
    WORKFLOW_RUN_ID = "github.workflow.run_id"
    WORKFLOW_STATUS = "github.workflow.status"
    WORKFLOW_CONCLUSION = "github.workflow.conclusion"
    WORKFLOW_EVENT = "github.workflow.event"
    WORKFLOW_BRANCH = "github.workflow.branch"


# Multi-language project support attributes
class MultiLangAttributes:
    """Multi-language project support semantic convention attributes."""
    OPERATION = "multilang.operation"
    LANGUAGE = "multilang.language"
    LANGUAGES_DETECTED = "multilang.languages.detected"
    PRIMARY_LANGUAGE = "multilang.languages.primary"
    FILES_TOTAL = "multilang.files.total"
    LINES_TOTAL = "multilang.lines.total"
    PACKAGE_MANAGER = "multilang.package_manager"
    BUILD_TOOL = "multilang.build_tool"
    DEPENDENCIES_TOTAL = "multilang.dependencies.total"
    BUILD_SUCCESS = "multilang.build.success"
    BUILD_DURATION = "multilang.build.duration"


class MultiLangOperations:
    """Multi-language project support operation constants."""
    DETECT_LANGUAGES = "detect_languages"
    ANALYZE_DEPENDENCIES = "analyze_dependencies"
    BUILD = "build"
    VALIDATE = "validate"
    INSTALL = "install"


# Performance profiling and optimization attributes
class PerformanceAttributes:
    """Performance profiling and optimization semantic convention attributes."""
    OPERATION = "performance.operation"
    FUNCTION_NAME = "performance.function.name"
    DURATION = "performance.duration"
    CPU_USAGE = "performance.cpu.usage"
    MEMORY_USAGE = "performance.memory.usage"
    PEAK_MEMORY = "performance.memory.peak"
    IO_READ = "performance.io.read"
    IO_WRITE = "performance.io.write"
    CONTEXT_SWITCHES = "performance.context_switches"
    BOTTLENECK_CATEGORY = "performance.bottleneck.category"
    BOTTLENECK_SEVERITY = "performance.bottleneck.severity"
    OPTIMIZATION_SCORE = "performance.optimization.score"


class PerformanceOperations:
    """Performance profiling and optimization operation constants."""
    PROFILE = "profile"
    MEASURE = "measure"
    BENCHMARK = "benchmark"
    ANALYZE = "analyze"
    OPTIMIZE = "optimize"


# Container management attributes
class ContainerAttributes:
    """Container management semantic convention attributes."""
    OPERATION = "container.operation"
    ENGINE = "container.engine"
    IMAGE = "container.image"
    TAG = "container.tag"
    NAME = "container.name"
    STATUS = "container.status"
    RUNTIME = "container.runtime"
    PORT = "container.port"
    VOLUME = "container.volume"


class ContainerOperations:
    """Container management operation constants."""
    BUILD = "build"
    RUN = "run"
    STOP = "stop"
    START = "start"
    REMOVE = "remove"
    LIST = "list"
    LOGS = "logs"


# CI/CD pipeline attributes
class CiCdAttributes:
    """CI/CD pipeline semantic convention attributes."""
    OPERATION = "cicd.operation"
    PIPELINE = "cicd.pipeline"
    STAGE = "cicd.stage"
    JOB = "cicd.job"
    STATUS = "cicd.status"
    DURATION = "cicd.duration"
    TRIGGER = "cicd.trigger"
    BRANCH = "cicd.branch"
    COMMIT = "cicd.commit"
    PLATFORM = "cicd.platform"
    WORKFLOW_NAME = "cicd.workflow.name"
    RUN_ID = "cicd.run.id"


class CiCdOperations:
    """CI/CD pipeline operation constants."""
    TRIGGER = "trigger"
    VALIDATE = "validate"
    BUILD = "build"
    TEST = "test"
    DEPLOY = "deploy"
    MONITOR = "monitor"
    LIST_RUNS = "list_runs"
    GET_ARTIFACTS = "get_artifacts"
    GET_DEPLOYMENTS = "get_deployments"
    CREATE_WORKFLOW = "create_workflow"


# Agent guides attributes
class AgentAttributes:
    """Agent guides semantic convention attributes."""
    OPERATION = "agent.operation"
    GUIDE_NAME = "agent.guide.name"
    VERSION = "agent.guide.version"
    COMMAND = "agent.command"
    SOURCE = "agent.source"
    STATUS = "agent.status"
    ANALYSIS_TOPIC = "agent.analysis.topic"
    SPECIALISTS = "agent.specialists"


class AgentOperations:
    """Agent guides operation constants."""
    INSTALL = "install"
    LIST = "list"
    CREATE = "create"
    VALIDATE = "validate"
    STATUS = "status"
    ANALYZE = "analyze"
    SEARCH = "search"


# Infrastructure operation attributes
class InfrastructureAttributes:
    """Infrastructure operation attributes for Terraform and IaC."""
    
    OPERATION: Final[str] = "infrastructure.operation"  # Infrastructure operation type
    
    PROVIDER: Final[str] = "infrastructure.provider"  # Cloud provider (aws, azure, gcp)
    
    ENABLE_8020: Final[str] = "infrastructure.enable_8020"  # Whether 8020 patterns are enabled
    
    WEAVER_FORGE: Final[str] = "infrastructure.weaver_forge"  # Whether Weaver Forge is enabled
    
    OTEL_VALIDATION: Final[str] = "infrastructure.otel_validation"  # Whether OTEL validation is enabled
    
    AUTO_APPROVE: Final[str] = "infrastructure.auto_approve"  # Whether auto-approval is enabled
    
    SECURITY_VALIDATION: Final[str] = "infrastructure.security_validation"  # Whether security validation is enabled
    
    COST_ANALYSIS: Final[str] = "infrastructure.cost_analysis"  # Whether cost analysis is enabled
    
    SECURITY_SCAN: Final[str] = "infrastructure.security_scan"  # Whether security scanning is enabled
    
    OPTIMIZE: Final[str] = "infrastructure.optimize"  # Whether optimization is enabled
    
    COST_OPTIMIZE: Final[str] = "infrastructure.cost_optimize"  # Whether cost optimization is enabled
    
    FOCUS_AREAS: Final[str] = "infrastructure.focus_areas"  # Focus areas for 8020 optimization
    
    COST_THRESHOLD: Final[str] = "infrastructure.cost_threshold"  # Cost threshold for optimization


# Infrastructure operation values
class InfrastructureOperations:
    """Standard infrastructure operation values."""
    
    INIT: Final[str] = "init"  # Initialize infrastructure workspace
    
    PLAN: Final[str] = "plan"  # Generate infrastructure plan
    
    APPLY: Final[str] = "apply"  # Apply infrastructure changes
    
    DESTROY: Final[str] = "destroy"  # Destroy infrastructure
    
    VALIDATE: Final[str] = "validate"  # Validate infrastructure configuration
    
    OPTIMIZE: Final[str] = "optimize"  # Optimize infrastructure
    
    SECURITY_SCAN: Final[str] = "security_scan"  # Security scanning
    
    COST_ANALYSIS: Final[str] = "cost_analysis"  # Cost analysis
    
    OTEL_VALIDATE: Final[str] = "otel_validate"  # OTEL validation


# Export all classes for convenient importing
__all__ = [
    "CliAttributes",
    "PackageAttributes",
    "PackageOperations",
    "ProcessAttributes",
    "TestAttributes", 
    "BuildAttributes",
    "ProjectAttributes",
    "ProjectOperations",
    "ReleaseAttributes",
    "ReleaseOperations",
    "ToolAttributes",
    "ToolOperations",
    "UvxAttributes",
    "UvxOperations",
    "CacheAttributes",
    "CacheOperations",
    "IndexAttributes", 
    "IndexOperations",
    "RemoteAttributes",
    "RemoteOperations",
    "SearchAttributes",
    "SearchOperations",
    "ServerAttributes",
    "ServerOperations",
    "ShellAttributes",
    "ShellOperations",
    "McpAttributes",
    "McpOperations",
    "AIAttributes",
    "CIAttributes",
    "CIOperations",
    "WorkflowAttributes",
    "WorkflowOperations",
    "InfoDesignAttributes",
    "InfoDesignOperations",
    "validate_attribute",
    "GitHubAttributes",
    "MultiLangAttributes",
    "MultiLangOperations",
    "PerformanceAttributes",
    "PerformanceOperations",
    "ContainerAttributes",
    "ContainerOperations",
    "CiCdAttributes",
    "CiCdOperations",
    "AgentAttributes",
    "AgentOperations",
    "InfrastructureAttributes",
    "InfrastructureOperations",
]